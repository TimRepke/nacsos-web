// This file is auto-generated by @hey-api/openapi-ts
/* eslint-disable  @typescript-eslint/no-unused-vars */

import type { CancelablePromise } from "./core/CancelablePromise";
import type { ApiResult } from "./core/ApiResult";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type { AxiosRequestConfig } from "axios";
import type { $OpenApiTs } from "./types.gen";

export class DefaultService {
  public static trackedTaskApiPingTrackedSleepTaskGet(
    data: $OpenApiTs["/api/ping/tracked-sleep-task"]["get"]["req"] = {},
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/tracked-sleep-task"]["get"]["res"][200]>> {
    const { sleepTime } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/tracked-sleep-task",
      query: {
        sleep_time: sleepTime,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static taskApiPingSleepTaskGet(
    data: $OpenApiTs["/api/ping/sleep-task"]["get"]["req"] = {},
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/sleep-task"]["get"]["res"][200]>> {
    const { sleepTime } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/sleep-task",
      query: {
        sleep_time: sleepTime,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static pongApiPingGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/",
      customRequestConfig: options,
    });
  }

  public static errApiPingErrorGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/error"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/error",
      customRequestConfig: options,
    });
  }

  public static warnApiPingWarnGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/warn"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/warn",
      customRequestConfig: options,
    });
  }

  public static permApiPingPermissionGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/permission"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/permission",
      customRequestConfig: options,
    });
  }

  public static dbTestApiPingDatabaseGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/database"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/database",
      customRequestConfig: options,
    });
  }

  public static pingApiPingNamePost(
    data: $OpenApiTs["/api/ping/{name}"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/{name}"]["post"]["res"][200]>> {
    const { name } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/ping/{name}",
      path: {
        name,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class AnnotationsService {
  public static getSchemeDefinitionApiAnnotationsSchemesDefinitionAnnotationSchemeIdGet(
    data: $OpenApiTs["/api/annotations/schemes/definition/{annotation_scheme_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/schemes/definition/{annotation_scheme_id}"]["get"]["res"][200]>
  > {
    const { annotationSchemeId, xProjectId, flat } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/schemes/definition/{annotation_scheme_id}",
      path: {
        annotation_scheme_id: annotationSchemeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        flat,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static putAnnotationSchemeApiAnnotationsSchemesDefinitionPut(
    data: $OpenApiTs["/api/annotations/schemes/definition/"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/schemes/definition/"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/annotations/schemes/definition/",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static removeAnnotationSchemeApiAnnotationsSchemesDefinitionSchemeIdDelete(
    data: $OpenApiTs["/api/annotations/schemes/definition/{scheme_id}"]["delete"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/schemes/definition/{scheme_id}"]["delete"]["res"][200]>> {
    const { annotationSchemeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/annotations/schemes/definition/{scheme_id}",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        annotation_scheme_id: annotationSchemeId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getSchemeDefinitionsForProjectApiAnnotationsSchemesListProjectIdGet(
    data: $OpenApiTs["/api/annotations/schemes/list/{project_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/schemes/list/{project_id}"]["get"]["res"][200]>> {
    const { projectId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/schemes/list/{project_id}",
      path: {
        project_id: projectId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getNextAssignmentForScopeForUserApiAnnotationsAnnotateNextAssignmentScopeIdCurrentAssignmentIdGet(
    data: $OpenApiTs["/api/annotations/annotate/next/{assignment_scope_id}/{current_assignment_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<
      $OpenApiTs["/api/annotations/annotate/next/{assignment_scope_id}/{current_assignment_id}"]["get"]["res"][200]
    >
  > {
    const { assignmentScopeId, currentAssignmentId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/next/{assignment_scope_id}/{current_assignment_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
        current_assignment_id: currentAssignmentId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getNextOpenAssignmentForScopeForUserApiAnnotationsAnnotateNextAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/next/{assignment_scope_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/next/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/next/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAssignmentApiAnnotationsAnnotateAssignmentAssignmentIdGet(
    data: $OpenApiTs["/api/annotations/annotate/assignment/{assignment_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/assignment/{assignment_id}"]["get"]["res"][200]>
  > {
    const { assignmentId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/assignment/{assignment_id}",
      path: {
        assignment_id: assignmentId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAssignmentScopesForUserApiAnnotationsAnnotateScopesProjectIdGet(
    data: $OpenApiTs["/api/annotations/annotate/scopes/{project_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/annotate/scopes/{project_id}"]["get"]["res"][200]>> {
    const { projectId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/scopes/{project_id}",
      path: {
        project_id: projectId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAssignmentScopesForProjectApiAnnotationsAnnotateScopesGet(
    data: $OpenApiTs["/api/annotations/annotate/scopes/"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/annotate/scopes/"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/scopes/",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAssignmentScopeApiAnnotationsAnnotateScopeAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/scope/{assignment_scope_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/scope/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/scope/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static removeAssignmentScopeApiAnnotationsAnnotateScopeAssignmentScopeIdDelete(
    data: $OpenApiTs["/api/annotations/annotate/scope/{assignment_scope_id}"]["delete"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/scope/{assignment_scope_id}"]["delete"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/annotations/annotate/scope/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static putAssignmentScopeApiAnnotationsAnnotateScopePut(
    data: $OpenApiTs["/api/annotations/annotate/scope/"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/annotate/scope/"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/annotations/annotate/scope/",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getNumAssignmentsForScopeApiAnnotationsAnnotateScopeCountsAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/scope/counts/{assignment_scope_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/scope/counts/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/scope/counts/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAssignmentsApiAnnotationsAnnotateAssignmentsAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/assignments/{assignment_scope_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/assignments/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/assignments/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAssignmentIndicatorsForScopeApiAnnotationsAnnotateAssignmentProgressAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/assignment/progress/{assignment_scope_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/assignment/progress/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/assignment/progress/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAssignmentsForScopeApiAnnotationsAnnotateAssignmentsScopeAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/assignments/scope/{assignment_scope_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/assignments/scope/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/assignments/scope/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAnnotationsApiAnnotationsAnnotateAnnotationsAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/annotations/{assignment_scope_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/annotations/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/annotations/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static saveAnnotationApiAnnotationsAnnotateSavePost(
    data: $OpenApiTs["/api/annotations/annotate/save"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/annotate/save"]["post"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/annotations/annotate/save",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getItemsWithCountApiAnnotationsConfigItemsGet(
    data: $OpenApiTs["/api/annotations/config/items/"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/items/"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/config/items/",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static makeAssignmentsApiAnnotationsConfigAssignmentsPost(
    data: $OpenApiTs["/api/annotations/config/assignments/"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/assignments/"]["post"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/annotations/config/assignments/",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static clearEmptyAssignmentsApiAnnotationsConfigScopesClearSchemeIdPost(
    data: $OpenApiTs["/api/annotations/config/scopes/clear/{scheme_id}"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/scopes/clear/{scheme_id}"]["post"]["res"][200]>> {
    const { scopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/annotations/config/scopes/clear/{scheme_id}",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        scope_id: scopeId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static editAssignmentApiAnnotationsConfigAssignmentsEditPut(
    data: $OpenApiTs["/api/annotations/config/assignments/edit/"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/assignments/edit/"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/annotations/config/assignments/edit/",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAssignmentScopesForSchemeApiAnnotationsConfigScopesSchemeIdGet(
    data: $OpenApiTs["/api/annotations/config/scopes/{scheme_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/scopes/{scheme_id}"]["get"]["res"][200]>> {
    const { schemeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/config/scopes/{scheme_id}",
      path: {
        scheme_id: schemeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAnnotatorsForSchemeApiAnnotationsConfigAnnotatorsSchemeIdGet(
    data: $OpenApiTs["/api/annotations/config/annotators/{scheme_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/annotators/{scheme_id}"]["get"]["res"][200]>> {
    const { schemeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/config/annotators/{scheme_id}",
      path: {
        scheme_id: schemeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getResolvedAnnotationsApiAnnotationsConfigResolvePost(
    data: $OpenApiTs["/api/annotations/config/resolve"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/resolve"]["post"]["res"][200]>> {
    const {
      xProjectId,
      requestBody,
      assignmentScopeId,
      botAnnotationMetadatId,
      includeEmpty,
      includeNew,
      updateExisting,
    } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/annotations/config/resolve",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        assignment_scope_id: assignmentScopeId,
        bot_annotation_metadat_id: botAnnotationMetadatId,
        include_empty: includeEmpty,
        include_new: includeNew,
        update_existing: updateExisting,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getSavedResolvedAnnotationsApiAnnotationsConfigResolvedBotAnnotationMetadataIdGet(
    data: $OpenApiTs["/api/annotations/config/resolved/{bot_annotation_metadata_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/config/resolved/{bot_annotation_metadata_id}"]["get"]["res"][200]>
  > {
    const { botAnnotationMetadataId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/config/resolved/{bot_annotation_metadata_id}",
      path: {
        bot_annotation_metadata_id: botAnnotationMetadataId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static saveResolvedAnnotationsApiAnnotationsConfigResolvePut(
    data: $OpenApiTs["/api/annotations/config/resolve/"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/resolve/"]["put"]["res"][200]>> {
    const { name, assignmentScopeId, annotationSchemeId, xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/annotations/config/resolve/",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        name,
        assignment_scope_id: assignmentScopeId,
        annotation_scheme_id: annotationSchemeId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static updateResolvedAnnotationsApiAnnotationsConfigResolveUpdatePut(
    data: $OpenApiTs["/api/annotations/config/resolve/update"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/resolve/update"]["put"]["res"][200]>> {
    const { botAnnotationMetadataId, name, xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/annotations/config/resolve/update",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        bot_annotation_metadata_id: botAnnotationMetadataId,
        name,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static listSavedResolvedAnnotationsApiAnnotationsConfigResolvedListGet(
    data: $OpenApiTs["/api/annotations/config/resolved-list/"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/resolved-list/"]["get"]["res"][200]>> {
    const { xProjectId, annotationSchemeId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/config/resolved-list/",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        annotation_scheme_id: annotationSchemeId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static deleteSavedResolvedAnnotationsApiAnnotationsConfigResolvedBotAnnotationMetaIdDelete(
    data: $OpenApiTs["/api/annotations/config/resolved/{bot_annotation_meta_id}"]["delete"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/config/resolved/{bot_annotation_meta_id}"]["delete"]["res"][200]>
  > {
    const { botAnnotationMetadataId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/annotations/config/resolved/{bot_annotation_meta_id}",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        bot_annotation_metadata_id: botAnnotationMetadataId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getBotAnnotationsApiAnnotationsBotAnnotationsGet(
    data: $OpenApiTs["/api/annotations/bot/annotations"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/bot/annotations"]["get"]["res"][200]>> {
    const { xProjectId, includeResolve } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/bot/annotations",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        include_resolve: includeResolve,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class UsersService {
  public static getAllUsersApiUsersListAllGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/list/all"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/list/all",
      customRequestConfig: options,
    });
  }

  public static getAllUsersDehydratedApiUsersListAllDehydratedGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/list/all/dehydrated"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/list/all/dehydrated",
      customRequestConfig: options,
    });
  }

  public static getProjectAnnotatorUsersApiUsersListProjectAnnotatorsProjectIdGet(
    data: $OpenApiTs["/api/users/list/project/annotators/{project_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/list/project/annotators/{project_id}"]["get"]["res"][200]>> {
    const { projectId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/list/project/annotators/{project_id}",
      path: {
        project_id: projectId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getProjectUsersApiUsersListProjectProjectIdGet(
    data: $OpenApiTs["/api/users/list/project/{project_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/list/project/{project_id}"]["get"]["res"][200]>> {
    const { projectId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/list/project/{project_id}",
      path: {
        project_id: projectId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getUserByIdApiUsersDetailsUserIdGet(
    data: $OpenApiTs["/api/users/details/{user_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/details/{user_id}"]["get"]["res"][200]>> {
    const { userId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/details/{user_id}",
      path: {
        user_id: userId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getUsersByIdsApiUsersDetailsGet(
    data: $OpenApiTs["/api/users/details"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/details"]["get"]["res"][200]>> {
    const { userId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/details",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        user_id: userId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static saveUserApiUsersDetailsPut(
    data: $OpenApiTs["/api/users/details"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/details"]["put"]["res"][200]>> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/users/details",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static saveUserSelfApiUsersMyDetailsPut(
    data: $OpenApiTs["/api/users/my-details"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/my-details"]["put"]["res"][200]>> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/users/my-details",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class OauthService {
  public static loginForAccessTokenApiLoginTokenPost(
    data: $OpenApiTs["/api/login/token"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/login/token"]["post"]["res"][200]>> {
    const { formData } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/login/token",
      formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static refreshTokenApiLoginTokenTokenIdPut(
    data: $OpenApiTs["/api/login/token/{token_id}"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/login/token/{token_id}"]["put"]["res"][200]>> {
    const { tokenId } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/login/token/{token_id}",
      path: {
        token_id: tokenId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static revokeTokenApiLoginTokenTokenIdDelete(
    data: $OpenApiTs["/api/login/token/{token_id}"]["delete"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/login/token/{token_id}"]["delete"]["res"][200]>> {
    const { tokenId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/login/token/{token_id}",
      path: {
        token_id: tokenId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static readTokensMeApiLoginMyTokensGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/login/my-tokens"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/login/my-tokens",
      customRequestConfig: options,
    });
  }

  public static readUsersMeApiLoginMeGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/login/me"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/login/me",
      customRequestConfig: options,
    });
  }

  public static logoutApiLoginLogoutGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/login/logout"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/login/logout",
      customRequestConfig: options,
    });
  }
}

export class ProjectsService {
  public static getAllProjectsApiProjectsListGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/projects/list"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/projects/list",
      customRequestConfig: options,
    });
  }

  public static createProjectApiProjectsCreatePut(
    data: $OpenApiTs["/api/projects/create"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/projects/create"]["put"]["res"][200]>> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/projects/create",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class ProjectService {
  public static getProjectApiProjectInfoGet(
    data: $OpenApiTs["/api/project/info"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/info"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/info",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static saveProjectApiProjectInfoPut(
    data: $OpenApiTs["/api/project/info"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/info"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/project/info",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static resetImportMutexApiProjectImportMutexPut(
    data: $OpenApiTs["/api/project/import_mutex"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/import_mutex"]["put"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/project/import_mutex",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getProjectPermissionsCurrentUserApiProjectPermissionsMeGet(
    data: $OpenApiTs["/api/project/permissions/me"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/me"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/permissions/me",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAllProjectPermissionsApiProjectPermissionsListProjectIdGet(
    data: $OpenApiTs["/api/project/permissions/list/{project_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/list/{project_id}"]["get"]["res"][200]>> {
    const { projectId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/permissions/list/{project_id}",
      path: {
        project_id: projectId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAllUserPermissionsApiProjectPermissionsListUsersGet(
    data: $OpenApiTs["/api/project/permissions/list-users"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/list-users"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/permissions/list-users",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static saveProjectPermissionApiProjectPermissionsPermissionPut(
    data: $OpenApiTs["/api/project/permissions/permission"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/permission"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/project/permissions/permission",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static removeProjectPermissionApiProjectPermissionsPermissionDelete(
    data: $OpenApiTs["/api/project/permissions/permission"]["delete"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/permission"]["delete"]["res"][200]>> {
    const { projectPermissionId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/project/permissions/permission",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        project_permission_id: projectPermissionId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getProjectPermissionsByIdApiProjectPermissionsProjectPermissionIdGet(
    data: $OpenApiTs["/api/project/permissions/{project_permission_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/{project_permission_id}"]["get"]["res"][200]>> {
    const { projectPermissionId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/permissions/{project_permission_id}",
      path: {
        project_permission_id: projectPermissionId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static listProjectDataApiProjectItemsItemTypeListGet(
    data: $OpenApiTs["/api/project/items/{item_type}/list"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/items/{item_type}/list"]["get"]["res"][200]>> {
    const { itemType, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/items/{item_type}/list",
      path: {
        item_type: itemType,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static listProjectDataPagedApiProjectItemsItemTypeListPagePageSizeGet(
    data: $OpenApiTs["/api/project/items/{item_type}/list/{page}/{page_size}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/project/items/{item_type}/list/{page}/{page_size}"]["get"]["res"][200]>
  > {
    const { itemType, page, pageSize, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/items/{item_type}/list/{page}/{page_size}",
      path: {
        item_type: itemType,
        page,
        page_size: pageSize,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getDetailForItemApiProjectItemsDetailItemIdGet(
    data: $OpenApiTs["/api/project/items/detail/{item_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/items/detail/{item_id}"]["get"]["res"][200]>> {
    const { itemId, xProjectId, itemType } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/items/detail/{item_id}",
      path: {
        item_id: itemId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        item_type: itemType,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getTextForItemApiProjectItemsTextItemIdGet(
    data: $OpenApiTs["/api/project/items/text/{item_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/items/text/{item_id}"]["get"]["res"][200]>> {
    const { itemId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/items/text/{item_id}",
      path: {
        item_id: itemId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static countProjectItemsApiProjectItemsCountGet(
    data: $OpenApiTs["/api/project/items/count"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/items/count"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/items/count",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static addTweetApiProjectItemsTwitterAddPost(
    data: $OpenApiTs["/api/project/items/twitter/add"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/items/twitter/add"]["post"]["res"][200]>> {
    const { xProjectId, requestBody, importId } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/project/items/twitter/add",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        import_id: importId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class ImportsService {
  public static getAllImportsForProjectApiImportsListGet(
    data: $OpenApiTs["/api/imports/list"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/list"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/imports/list",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getImportDetailsApiImportsImportImportIdGet(
    data: $OpenApiTs["/api/imports/import/{import_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import/{import_id}"]["get"]["res"][200]>> {
    const { importId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/imports/import/{import_id}",
      path: {
        import_id: importId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static triggerImportApiImportsImportImportIdPost(
    data: $OpenApiTs["/api/imports/import/{import_id}"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import/{import_id}"]["post"]["res"][200]>> {
    const { importId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/imports/import/{import_id}",
      path: {
        import_id: importId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getImportCountsApiImportsImportImportIdCountGet(
    data: $OpenApiTs["/api/imports/import/{import_id}/count/"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import/{import_id}/count/"]["get"]["res"][200]>> {
    const { importId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/imports/import/{import_id}/count/",
      path: {
        import_id: importId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getImportRevisionsApiImportsImportImportIdRevisionsGet(
    data: $OpenApiTs["/api/imports/import/{import_id}/revisions"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import/{import_id}/revisions"]["get"]["res"][200]>> {
    const { importId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/imports/import/{import_id}/revisions",
      path: {
        import_id: importId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static putImportDetailsApiImportsImportPut(
    data: $OpenApiTs["/api/imports/import"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/imports/import",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static deleteImportDetailsApiImportsImportDeleteImportIdDelete(
    data: $OpenApiTs["/api/imports/import/delete/{import_id}"]["delete"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import/delete/{import_id}"]["delete"]["res"][200]>> {
    const { importId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/imports/import/delete/{import_id}",
      path: {
        import_id: importId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class EventsService {
  public static emitApiEventsEmitPost(
    data: $OpenApiTs["/api/events/emit"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/events/emit"]["post"]["res"][200]>> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/events/emit",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class HighlightersService {
  public static getProjectHighlightersApiHighlightersProjectGet(
    data: $OpenApiTs["/api/highlighters/project"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/highlighters/project"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/highlighters/project",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static upsertHighlighterApiHighlightersProjectPut(
    data: $OpenApiTs["/api/highlighters/project"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/highlighters/project"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/highlighters/project",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getHighlighterApiHighlightersHighlighterIdGet(
    data: $OpenApiTs["/api/highlighters/{highlighter_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/highlighters/{highlighter_id}"]["get"]["res"][200]>> {
    const { highlighterId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/highlighters/{highlighter_id}",
      path: {
        highlighter_id: highlighterId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class StatsService {
  public static getBasicStatsApiStatsBasicsGet(
    data: $OpenApiTs["/api/stats/basics"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/stats/basics"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/stats/basics",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getAnnotatorRankingApiStatsRankGet(
    data: $OpenApiTs["/api/stats/rank"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/stats/rank"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/stats/rank",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getPublicationYearHistogramApiStatsHistogramYearsGet(
    data: $OpenApiTs["/api/stats/histogram/years"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/stats/histogram/years"]["get"]["res"][200]>> {
    const { xProjectId, fromYear, toYear } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/stats/histogram/years",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        from_year: fromYear,
        to_year: toYear,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class ExportService {
  public static getAnnotationsCsvApiExportAnnotationsCsvPost(
    data: $OpenApiTs["/api/export/annotations/csv"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/export/annotations/csv"]["post"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/export/annotations/csv",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getExportBaseinfoApiExportProjectBaseinfoGet(
    data: $OpenApiTs["/api/export/project/baseinfo"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/export/project/baseinfo"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/export/project/baseinfo",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class SearchService {
  public static searchOpenalexApiSearchOpenalexSelectPost(
    data: $OpenApiTs["/api/search/openalex/select"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/search/openalex/select"]["post"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/search/openalex/select",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static termExpansionApiSearchOpenalexTermsGet(
    data: $OpenApiTs["/api/search/openalex/terms"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/search/openalex/terms"]["get"]["res"][200]>> {
    const { termPrefix, xProjectId, limit } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/search/openalex/terms",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        term_prefix: termPrefix,
        limit,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static nqlQueryApiSearchNqlQueryPost(
    data: $OpenApiTs["/api/search/nql/query"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/search/nql/query"]["post"]["res"][200]>> {
    const { xProjectId, requestBody, page, limit } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/search/nql/query",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        page,
        limit,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static nqlQueryCountApiSearchNqlCountPost(
    data: $OpenApiTs["/api/search/nql/count"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/search/nql/count"]["post"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/search/nql/count",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class EvaluationService {
  public static getProjectScopesApiEvalTrackingScopesGet(
    data: $OpenApiTs["/api/eval/tracking/scopes"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/tracking/scopes"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/tracking/scopes",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getResolutionsForScopeApiEvalResolutionsGet(
    data: $OpenApiTs["/api/eval/resolutions"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/resolutions"]["get"]["res"][200]>> {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/resolutions",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        assignment_scope_id: assignmentScopeId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getProjectTrackersApiEvalTrackingTrackersGet(
    data: $OpenApiTs["/api/eval/tracking/trackers"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/tracking/trackers"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/tracking/trackers",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getTrackerApiEvalTrackingTrackerTrackerIdGet(
    data: $OpenApiTs["/api/eval/tracking/tracker/{tracker_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/tracking/tracker/{tracker_id}"]["get"]["res"][200]>> {
    const { trackerId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/tracking/tracker/{tracker_id}",
      path: {
        tracker_id: trackerId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static saveTrackerApiEvalTrackingTrackerPut(
    data: $OpenApiTs["/api/eval/tracking/tracker"]["put"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/tracking/tracker"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/eval/tracking/tracker",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static updateTrackerApiEvalTrackingRefreshPost(
    data: $OpenApiTs["/api/eval/tracking/refresh"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/tracking/refresh"]["post"]["res"][200]>> {
    const { trackerId, xProjectId, reset } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/eval/tracking/refresh",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        tracker_id: trackerId,
        reset,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getIrrApiEvalQualityLoadAssignmentScopeIdGet(
    data: $OpenApiTs["/api/eval/quality/load/{assignment_scope_id}"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/quality/load/{assignment_scope_id}"]["get"]["res"][200]>> {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/quality/load/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static recomputeIrrApiEvalQualityComputeGet(
    data: $OpenApiTs["/api/eval/quality/compute"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/quality/compute"]["get"]["res"][200]>> {
    const { assignmentScopeId, xProjectId, botAnnotationMetadataId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/quality/compute",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        assignment_scope_id: assignmentScopeId,
        bot_annotation_metadata_id: botAnnotationMetadataId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class MailingService {
  public static resetPasswordApiMailResetPasswordUsernamePost(
    data: $OpenApiTs["/api/mail/reset-password/{username}"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/mail/reset-password/{username}"]["post"]["res"][200]>> {
    const { username } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/mail/reset-password/{username}",
      path: {
        username,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static welcomeMailApiMailWelcomePost(
    data: $OpenApiTs["/api/mail/welcome"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/mail/welcome"]["post"]["res"][200]>> {
    const { username, password } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/mail/welcome",
      query: {
        username,
        password,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static remindUsersAssigmentApiMailAssignmentReminderPost(
    data: $OpenApiTs["/api/mail/assignment-reminder"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/mail/assignment-reminder"]["post"]["res"][200]>> {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/mail/assignment-reminder",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        assignment_scope_id: assignmentScopeId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static newsMailApiMailNewsPost(
    data: $OpenApiTs["/api/mail/news"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/mail/news"]["post"]["res"][200]>> {
    const { requestBody, isActive, isSubscribed } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/mail/news",
      query: {
        is_active: isActive,
        is_subscribed: isSubscribed,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }
}

export class PipesService {
  public static getArtefactsApiPipesArtefactsListGet(
    data: $OpenApiTs["/api/pipes/artefacts/list"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/list"]["get"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/artefacts/list",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getTaskLogApiPipesArtefactsLogGet(
    data: $OpenApiTs["/api/pipes/artefacts/log"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/log"]["get"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/artefacts/log",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static streamTaskLogApiPipesArtefactsLogStreamGet(
    data: $OpenApiTs["/api/pipes/artefacts/log-stream"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/log-stream"]["get"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/artefacts/log-stream",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getFileApiPipesArtefactsFileGet(
    data: $OpenApiTs["/api/pipes/artefacts/file"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/file"]["get"]["res"][200]>> {
    const { filename, xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/artefacts/file",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      query: {
        filename,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getArchiveApiPipesArtefactsFilesGet(
    data: $OpenApiTs["/api/pipes/artefacts/files"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/files"]["get"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/artefacts/files",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static uploadFileApiPipesArtefactsFilesUploadPost(
    data: $OpenApiTs["/api/pipes/artefacts/files/upload"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/files/upload"]["post"]["res"][200]>> {
    const { xProjectId, formData, folder } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/pipes/artefacts/files/upload",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        folder,
      },
      formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static uploadFilesApiPipesArtefactsFilesUploadManyPost(
    data: $OpenApiTs["/api/pipes/artefacts/files/upload-many"]["post"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/files/upload-many"]["post"]["res"][200]>> {
    const { xProjectId, formData, folder } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/pipes/artefacts/files/upload-many",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        folder,
      },
      formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static searchTasksApiPipesTasksGet(
    data: $OpenApiTs["/api/pipes/tasks"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/tasks"]["get"]["res"][200]>> {
    const { xProjectId, functionName, fingerprint, userId, location, status, orderByFields } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/tasks",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        function_name: functionName,
        fingerprint,
        user_id: userId,
        location,
        status,
        order_by_fields: orderByFields,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getTaskApiPipesTaskGet(
    data: $OpenApiTs["/api/pipes/task"]["get"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/task"]["get"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/task",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static deleteTaskApiPipesTaskDelete(
    data: $OpenApiTs["/api/pipes/task"]["delete"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/task"]["delete"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/pipes/task",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static terminateTaskApiPipesDramatiqTaskDelete(
    data: $OpenApiTs["/api/pipes/dramatiq/task"]["delete"]["req"],
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/dramatiq/task"]["delete"]["res"][200]>> {
    const { messageId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/pipes/dramatiq/task",
      query: {
        message_id: messageId,
      },
      errors: {
        422: "Validation Error",
      },
      customRequestConfig: options,
    });
  }

  public static getDWorkersApiPipesDramatiqWorkersGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/dramatiq/workers"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/dramatiq/workers",
      customRequestConfig: options,
    });
  }

  public static getDTasksApiPipesDramatiqTasksGet(
    options?: Partial<AxiosRequestConfig>,
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/dramatiq/tasks"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/dramatiq/tasks",
      customRequestConfig: options,
    });
  }
}
