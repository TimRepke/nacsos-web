// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import type { ApiResult } from "./core/ApiResult";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type { $OpenApiTs } from "./types.gen";

export class DefaultService {
  /**
   *  Pong
   * @returns string Successful Response
   * @throws ApiError
   */
  public static pongApiPingGet(): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/",
    });
  }

  /**
   *  Err
   * @returns string Successful Response
   * @throws ApiError
   */
  public static errApiPingErrorGet(): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/error"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/error",
    });
  }

  /**
   *  Warn
   * @returns string Successful Response
   * @throws ApiError
   */
  public static warnApiPingWarnGet(): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/warn"]["get"]["res"][200]>> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/warn",
    });
  }

  /**
   * Perm
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static permApiPingPermissionGet(): CancelablePromise<
    ApiResult<$OpenApiTs["/api/ping/permission"]["get"]["res"][200]>
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ping/permission",
    });
  }

  /**
   *  Ping
   * @returns string Successful Response
   * @throws ApiError
   */
  public static pingApiPingNamePost(
    data: $OpenApiTs["/api/ping/{name}"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/ping/{name}"]["post"]["res"][200]>> {
    const { name } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/ping/{name}",
      path: {
        name,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class AnnotationsService {
  /**
   * Get Scheme Definition
   * This endpoint returns the detailed definition of an annotation scheme.
   *
   * :param annotation_scheme_id: database id of the annotation scheme.
   * :param flat: True to get the flattened scheme
   * :param permissions:
   * :return: a single annotation scheme
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getSchemeDefinitionApiAnnotationsSchemesDefinitionAnnotationSchemeIdGet(
    data: $OpenApiTs["/api/annotations/schemes/definition/{annotation_scheme_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/schemes/definition/{annotation_scheme_id}"]["get"]["res"][200]>
  > {
    const { annotationSchemeId, xProjectId, flat } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/schemes/definition/{annotation_scheme_id}",
      path: {
        annotation_scheme_id: annotationSchemeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        flat,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Put Annotation Scheme
   * @returns string Successful Response
   * @throws ApiError
   */
  public static putAnnotationSchemeApiAnnotationsSchemesDefinitionPut(
    data: $OpenApiTs["/api/annotations/schemes/definition/"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/schemes/definition/"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/annotations/schemes/definition/",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Remove Annotation Scheme
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static removeAnnotationSchemeApiAnnotationsSchemesDefinitionSchemeIdDelete(
    data: $OpenApiTs["/api/annotations/schemes/definition/{scheme_id}"]["delete"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/schemes/definition/{scheme_id}"]["delete"]["res"][200]>> {
    const { annotationSchemeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/annotations/schemes/definition/{scheme_id}",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        annotation_scheme_id: annotationSchemeId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Scheme Definitions For Project
   * This endpoint returns the detailed definitions of all annotation schemes associated with a project.
   *
   * :param project_id: database id of the project
   * :param permissions:
   * :return: list of annotation schemes
   * @returns AnnotationSchemeModel Successful Response
   * @throws ApiError
   */
  public static getSchemeDefinitionsForProjectApiAnnotationsSchemesListProjectIdGet(
    data: $OpenApiTs["/api/annotations/schemes/list/{project_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/schemes/list/{project_id}"]["get"]["res"][200]>> {
    const { projectId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/schemes/list/{project_id}",
      path: {
        project_id: projectId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Next Assignment For Scope For User
   * @returns AnnotationItem Successful Response
   * @throws ApiError
   */
  public static getNextAssignmentForScopeForUserApiAnnotationsAnnotateNextAssignmentScopeIdCurrentAssignmentIdGet(
    data: $OpenApiTs["/api/annotations/annotate/next/{assignment_scope_id}/{current_assignment_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<
      $OpenApiTs["/api/annotations/annotate/next/{assignment_scope_id}/{current_assignment_id}"]["get"]["res"][200]
    >
  > {
    const { assignmentScopeId, currentAssignmentId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/next/{assignment_scope_id}/{current_assignment_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
        current_assignment_id: currentAssignmentId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Next Open Assignment For Scope For User
   * @returns AnnotationItem Successful Response
   * @throws ApiError
   */
  public static getNextOpenAssignmentForScopeForUserApiAnnotationsAnnotateNextAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/next/{assignment_scope_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/next/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/next/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Assignment
   * @returns AnnotationItem Successful Response
   * @throws ApiError
   */
  public static getAssignmentApiAnnotationsAnnotateAssignmentAssignmentIdGet(
    data: $OpenApiTs["/api/annotations/annotate/assignment/{assignment_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/assignment/{assignment_id}"]["get"]["res"][200]>
  > {
    const { assignmentId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/assignment/{assignment_id}",
      path: {
        assignment_id: assignmentId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Assignment Scopes For User
   * @returns UserProjectAssignmentScope Successful Response
   * @throws ApiError
   */
  public static getAssignmentScopesForUserApiAnnotationsAnnotateScopesProjectIdGet(
    data: $OpenApiTs["/api/annotations/annotate/scopes/{project_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/annotate/scopes/{project_id}"]["get"]["res"][200]>> {
    const { projectId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/scopes/{project_id}",
      path: {
        project_id: projectId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Assignment Scopes For Project
   * @returns AssignmentScopeModel Successful Response
   * @throws ApiError
   */
  public static getAssignmentScopesForProjectApiAnnotationsAnnotateScopesGet(
    data: $OpenApiTs["/api/annotations/annotate/scopes/"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/annotate/scopes/"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/scopes/",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Assignment Scope
   * @returns AssignmentScopeModel Successful Response
   * @throws ApiError
   */
  public static getAssignmentScopeApiAnnotationsAnnotateScopeAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/scope/{assignment_scope_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/scope/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/scope/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Remove Assignment Scope
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static removeAssignmentScopeApiAnnotationsAnnotateScopeAssignmentScopeIdDelete(
    data: $OpenApiTs["/api/annotations/annotate/scope/{assignment_scope_id}"]["delete"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/scope/{assignment_scope_id}"]["delete"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/annotations/annotate/scope/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Put Assignment Scope
   * @returns string Successful Response
   * @throws ApiError
   */
  public static putAssignmentScopeApiAnnotationsAnnotateScopePut(
    data: $OpenApiTs["/api/annotations/annotate/scope/"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/annotate/scope/"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/annotations/annotate/scope/",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Num Assignments For Scope
   * @returns AssignmentCounts Successful Response
   * @throws ApiError
   */
  public static getNumAssignmentsForScopeApiAnnotationsAnnotateScopeCountsAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/scope/counts/{assignment_scope_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/scope/counts/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/scope/counts/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Assignments
   * @returns AssignmentModel Successful Response
   * @throws ApiError
   */
  public static getAssignmentsApiAnnotationsAnnotateAssignmentsAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/assignments/{assignment_scope_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/assignments/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/assignments/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Assignment Indicators For Scope
   * @returns AssignmentScopeEntry Successful Response
   * @throws ApiError
   */
  public static getAssignmentIndicatorsForScopeApiAnnotationsAnnotateAssignmentProgressAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/assignment/progress/{assignment_scope_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/assignment/progress/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/assignment/progress/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Assignments For Scope
   * @returns AssignmentModel Successful Response
   * @throws ApiError
   */
  public static getAssignmentsForScopeApiAnnotationsAnnotateAssignmentsScopeAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/assignments/scope/{assignment_scope_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/assignments/scope/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/assignments/scope/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Annotations
   * @returns AssignmentModel Successful Response
   * @throws ApiError
   */
  public static getAnnotationsApiAnnotationsAnnotateAnnotationsAssignmentScopeIdGet(
    data: $OpenApiTs["/api/annotations/annotate/annotations/{assignment_scope_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/annotate/annotations/{assignment_scope_id}"]["get"]["res"][200]>
  > {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/annotate/annotations/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Save Annotation
   * @returns AssignmentStatus Successful Response
   * @throws ApiError
   */
  public static saveAnnotationApiAnnotationsAnnotateSavePost(
    data: $OpenApiTs["/api/annotations/annotate/save"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/annotate/save"]["post"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/annotations/annotate/save",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Items With Count
   * @returns ItemWithCount Successful Response
   * @throws ApiError
   */
  public static getItemsWithCountApiAnnotationsConfigItemsGet(
    data: $OpenApiTs["/api/annotations/config/items/"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/items/"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/config/items/",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Make Assignments
   * @returns AssignmentModel Successful Response
   * @throws ApiError
   */
  public static makeAssignmentsApiAnnotationsConfigAssignmentsPost(
    data: $OpenApiTs["/api/annotations/config/assignments/"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/assignments/"]["post"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/annotations/config/assignments/",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Assignment Scopes For Scheme
   * @returns AssignmentScopeModel Successful Response
   * @throws ApiError
   */
  public static getAssignmentScopesForSchemeApiAnnotationsConfigScopesSchemeIdGet(
    data: $OpenApiTs["/api/annotations/config/scopes/{scheme_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/scopes/{scheme_id}"]["get"]["res"][200]>> {
    const { schemeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/config/scopes/{scheme_id}",
      path: {
        scheme_id: schemeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Annotators For Scheme
   * @returns UserModel Successful Response
   * @throws ApiError
   */
  public static getAnnotatorsForSchemeApiAnnotationsConfigAnnotatorsSchemeIdGet(
    data: $OpenApiTs["/api/annotations/config/annotators/{scheme_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/annotators/{scheme_id}"]["get"]["res"][200]>> {
    const { schemeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/config/annotators/{scheme_id}",
      path: {
        scheme_id: schemeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Resolved Annotations
   * Get all annotations that match the filters (e.g. all annotations made by users in scope with :scope_id).
   *
   * :param include_new:
   * :param update_existing:
   * :param assignment_scope_id:
   * :param bot_annotation_metadat_id:
   * :param include_empty:
   * :param settings
   * :param permissions:
   * :return:
   * @returns ResolutionProposal Successful Response
   * @throws ApiError
   */
  public static getResolvedAnnotationsApiAnnotationsConfigResolvePost(
    data: $OpenApiTs["/api/annotations/config/resolve"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/resolve"]["post"]["res"][200]>> {
    const {
      xProjectId,
      requestBody,
      assignmentScopeId,
      botAnnotationMetadatId,
      includeEmpty,
      includeNew,
      updateExisting,
    } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/annotations/config/resolve",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        assignment_scope_id: assignmentScopeId,
        bot_annotation_metadat_id: botAnnotationMetadatId,
        include_empty: includeEmpty,
        include_new: includeNew,
        update_existing: updateExisting,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Saved Resolved Annotations
   * @returns SavedResolution Successful Response
   * @throws ApiError
   */
  public static getSavedResolvedAnnotationsApiAnnotationsConfigResolvedBotAnnotationMetadataIdGet(
    data: $OpenApiTs["/api/annotations/config/resolved/{bot_annotation_metadata_id}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/config/resolved/{bot_annotation_metadata_id}"]["get"]["res"][200]>
  > {
    const { botAnnotationMetadataId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/config/resolved/{bot_annotation_metadata_id}",
      path: {
        bot_annotation_metadata_id: botAnnotationMetadataId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Save Resolved Annotations
   * @returns string Successful Response
   * @throws ApiError
   */
  public static saveResolvedAnnotationsApiAnnotationsConfigResolvePut(
    data: $OpenApiTs["/api/annotations/config/resolve/"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/resolve/"]["put"]["res"][200]>> {
    const { name, assignmentScopeId, annotationSchemeId, xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/annotations/config/resolve/",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        name,
        assignment_scope_id: assignmentScopeId,
        annotation_scheme_id: annotationSchemeId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Resolved Annotations
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static updateResolvedAnnotationsApiAnnotationsConfigResolveUpdatePut(
    data: $OpenApiTs["/api/annotations/config/resolve/update"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/resolve/update"]["put"]["res"][200]>> {
    const { botAnnotationMetadataId, name, xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/annotations/config/resolve/update",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        bot_annotation_metadata_id: botAnnotationMetadataId,
        name,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * List Saved Resolved Annotations
   * @returns BotAnnotationMetaDataBaseModel Successful Response
   * @throws ApiError
   */
  public static listSavedResolvedAnnotationsApiAnnotationsConfigResolvedListGet(
    data: $OpenApiTs["/api/annotations/config/resolved-list/"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/config/resolved-list/"]["get"]["res"][200]>> {
    const { xProjectId, annotationSchemeId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/config/resolved-list/",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        annotation_scheme_id: annotationSchemeId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Saved Resolved Annotations
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteSavedResolvedAnnotationsApiAnnotationsConfigResolvedBotAnnotationMetaIdDelete(
    data: $OpenApiTs["/api/annotations/config/resolved/{bot_annotation_meta_id}"]["delete"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/annotations/config/resolved/{bot_annotation_meta_id}"]["delete"]["res"][200]>
  > {
    const { botAnnotationMetadataId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/annotations/config/resolved/{bot_annotation_meta_id}",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        bot_annotation_metadata_id: botAnnotationMetadataId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Bot Annotations
   * @returns BotMetaInfo Successful Response
   * @throws ApiError
   */
  public static getBotAnnotationsApiAnnotationsBotAnnotationsGet(
    data: $OpenApiTs["/api/annotations/bot/annotations"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/annotations/bot/annotations"]["get"]["res"][200]>> {
    const { xProjectId, includeResolve } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/annotations/bot/annotations",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        include_resolve: includeResolve,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class UsersService {
  /**
   * Get All Users
   * @returns UserBaseModel Successful Response
   * @throws ApiError
   */
  public static getAllUsersApiUsersListAllGet(): CancelablePromise<
    ApiResult<$OpenApiTs["/api/users/list/all"]["get"]["res"][200]>
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/list/all",
    });
  }

  /**
   * Get All Users Dehydrated
   * @returns DehydratedUser Successful Response
   * @throws ApiError
   */
  public static getAllUsersDehydratedApiUsersListAllDehydratedGet(): CancelablePromise<
    ApiResult<$OpenApiTs["/api/users/list/all/dehydrated"]["get"]["res"][200]>
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/list/all/dehydrated",
    });
  }

  /**
   * Get Project Annotator Users
   * @returns UserBaseModel Successful Response
   * @throws ApiError
   */
  public static getProjectAnnotatorUsersApiUsersListProjectAnnotatorsProjectIdGet(
    data: $OpenApiTs["/api/users/list/project/annotators/{project_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/list/project/annotators/{project_id}"]["get"]["res"][200]>> {
    const { projectId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/list/project/annotators/{project_id}",
      path: {
        project_id: projectId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Project Users
   * @returns UserBaseModel Successful Response
   * @throws ApiError
   */
  public static getProjectUsersApiUsersListProjectProjectIdGet(
    data: $OpenApiTs["/api/users/list/project/{project_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/list/project/{project_id}"]["get"]["res"][200]>> {
    const { projectId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/list/project/{project_id}",
      path: {
        project_id: projectId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get User By Id
   * @returns UserModel Successful Response
   * @throws ApiError
   */
  public static getUserByIdApiUsersDetailsUserIdGet(
    data: $OpenApiTs["/api/users/details/{user_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/details/{user_id}"]["get"]["res"][200]>> {
    const { userId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/details/{user_id}",
      path: {
        user_id: userId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Users By Ids
   * @returns UserModel Successful Response
   * @throws ApiError
   */
  public static getUsersByIdsApiUsersDetailsGet(
    data: $OpenApiTs["/api/users/details"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/details"]["get"]["res"][200]>> {
    const { userId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/details",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        user_id: userId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Save User
   * @returns string Successful Response
   * @throws ApiError
   */
  public static saveUserApiUsersDetailsPut(
    data: $OpenApiTs["/api/users/details"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/details"]["put"]["res"][200]>> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/users/details",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Save User Self
   * @returns string Successful Response
   * @throws ApiError
   */
  public static saveUserSelfApiUsersMyDetailsPut(
    data: $OpenApiTs["/api/users/my-details"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/users/my-details"]["put"]["res"][200]>> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/users/my-details",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class OauthService {
  /**
   * Login For Access Token
   * @returns AuthTokenModel Successful Response
   * @throws ApiError
   */
  public static loginForAccessTokenApiLoginTokenPost(
    data: $OpenApiTs["/api/login/token"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/login/token"]["post"]["res"][200]>> {
    const { formData } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/login/token",
      formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Refresh Token
   * @returns AuthTokenModel Successful Response
   * @throws ApiError
   */
  public static refreshTokenApiLoginTokenTokenIdPut(
    data: $OpenApiTs["/api/login/token/{token_id}"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/login/token/{token_id}"]["put"]["res"][200]>> {
    const { tokenId } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/login/token/{token_id}",
      path: {
        token_id: tokenId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Revoke Token
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static revokeTokenApiLoginTokenTokenIdDelete(
    data: $OpenApiTs["/api/login/token/{token_id}"]["delete"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/login/token/{token_id}"]["delete"]["res"][200]>> {
    const { tokenId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/login/token/{token_id}",
      path: {
        token_id: tokenId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Read Tokens Me
   * @returns AuthTokenModel Successful Response
   * @throws ApiError
   */
  public static readTokensMeApiLoginMyTokensGet(): CancelablePromise<
    ApiResult<$OpenApiTs["/api/login/my-tokens"]["get"]["res"][200]>
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/login/my-tokens",
    });
  }

  /**
   * Read Users Me
   * @returns UserModel Successful Response
   * @throws ApiError
   */
  public static readUsersMeApiLoginMeGet(): CancelablePromise<
    ApiResult<$OpenApiTs["/api/login/me"]["get"]["res"][200]>
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/login/me",
    });
  }

  /**
   * Logout
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static logoutApiLoginLogoutGet(): CancelablePromise<
    ApiResult<$OpenApiTs["/api/login/logout"]["get"]["res"][200]>
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/login/logout",
    });
  }
}

export class ProjectsService {
  /**
   * Get All Projects
   * This endpoint returns all projects the currently logged-in user can see.
   * For regular users, this includes all projects for which an entry in ProjectPermissions exists.
   * For SuperUsers, this returns all projects on the platform.
   *
   * :return: List of projects
   * @returns ProjectInfo Successful Response
   * @throws ApiError
   */
  public static getAllProjectsApiProjectsListGet(): CancelablePromise<
    ApiResult<$OpenApiTs["/api/projects/list"]["get"]["res"][200]>
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/projects/list",
    });
  }

  /**
   * Create Project
   * @returns string Successful Response
   * @throws ApiError
   */
  public static createProjectApiProjectsCreatePut(
    data: $OpenApiTs["/api/projects/create"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/projects/create"]["put"]["res"][200]>> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/projects/create",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class ProjectService {
  /**
   * Get Project
   * @returns ProjectModel Successful Response
   * @throws ApiError
   */
  public static getProjectApiProjectInfoGet(
    data: $OpenApiTs["/api/project/info"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/info"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/info",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Save Project
   * @returns string Successful Response
   * @throws ApiError
   */
  public static saveProjectApiProjectInfoPut(
    data: $OpenApiTs["/api/project/info"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/info"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/project/info",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Project Permissions Current User
   * @returns ProjectPermissionsModel Successful Response
   * @throws ApiError
   */
  public static getProjectPermissionsCurrentUserApiProjectPermissionsMeGet(
    data: $OpenApiTs["/api/project/permissions/me"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/me"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/permissions/me",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get All Project Permissions
   * @returns ProjectPermissionsModel Successful Response
   * @throws ApiError
   */
  public static getAllProjectPermissionsApiProjectPermissionsListProjectIdGet(
    data: $OpenApiTs["/api/project/permissions/list/{project_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/list/{project_id}"]["get"]["res"][200]>> {
    const { projectId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/permissions/list/{project_id}",
      path: {
        project_id: projectId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get All User Permissions
   * @returns UserPermission Successful Response
   * @throws ApiError
   */
  public static getAllUserPermissionsApiProjectPermissionsListUsersGet(
    data: $OpenApiTs["/api/project/permissions/list-users"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/list-users"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/permissions/list-users",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Save Project Permission
   * @returns string Successful Response
   * @throws ApiError
   */
  public static saveProjectPermissionApiProjectPermissionsPermissionPut(
    data: $OpenApiTs["/api/project/permissions/permission"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/permission"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/project/permissions/permission",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Remove Project Permission
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static removeProjectPermissionApiProjectPermissionsPermissionDelete(
    data: $OpenApiTs["/api/project/permissions/permission"]["delete"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/permission"]["delete"]["res"][200]>> {
    const { projectPermissionId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/project/permissions/permission",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        project_permission_id: projectPermissionId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Project Permissions By Id
   * @returns ProjectPermissionsModel Successful Response
   * @throws ApiError
   */
  public static getProjectPermissionsByIdApiProjectPermissionsProjectPermissionIdGet(
    data: $OpenApiTs["/api/project/permissions/{project_permission_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/permissions/{project_permission_id}"]["get"]["res"][200]>> {
    const { projectPermissionId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/permissions/{project_permission_id}",
      path: {
        project_permission_id: projectPermissionId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * List Project Data
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static listProjectDataApiProjectItemsItemTypeListGet(
    data: $OpenApiTs["/api/project/items/{item_type}/list"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/items/{item_type}/list"]["get"]["res"][200]>> {
    const { itemType, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/items/{item_type}/list",
      path: {
        item_type: itemType,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * List Project Data Paged
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static listProjectDataPagedApiProjectItemsItemTypeListPagePageSizeGet(
    data: $OpenApiTs["/api/project/items/{item_type}/list/{page}/{page_size}"]["get"]["req"],
  ): CancelablePromise<
    ApiResult<$OpenApiTs["/api/project/items/{item_type}/list/{page}/{page_size}"]["get"]["res"][200]>
  > {
    const { itemType, page, pageSize, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/items/{item_type}/list/{page}/{page_size}",
      path: {
        item_type: itemType,
        page,
        page_size: pageSize,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Detail For Item
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getDetailForItemApiProjectItemsDetailItemIdGet(
    data: $OpenApiTs["/api/project/items/detail/{item_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/items/detail/{item_id}"]["get"]["res"][200]>> {
    const { itemId, xProjectId, itemType } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/items/detail/{item_id}",
      path: {
        item_id: itemId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        item_type: itemType,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Text For Item
   * @returns string Successful Response
   * @throws ApiError
   */
  public static getTextForItemApiProjectItemsTextItemIdGet(
    data: $OpenApiTs["/api/project/items/text/{item_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/items/text/{item_id}"]["get"]["res"][200]>> {
    const { itemId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/items/text/{item_id}",
      path: {
        item_id: itemId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Count Project Items
   * @returns number Successful Response
   * @throws ApiError
   */
  public static countProjectItemsApiProjectItemsCountGet(
    data: $OpenApiTs["/api/project/items/count"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/items/count"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/project/items/count",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Add Tweet
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static addTweetApiProjectItemsTwitterAddPost(
    data: $OpenApiTs["/api/project/items/twitter/add"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/project/items/twitter/add"]["post"]["res"][200]>> {
    const { xProjectId, requestBody, importId } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/project/items/twitter/add",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        import_id: importId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class ImportsService {
  /**
   * Get All Imports For Project
   * @returns ImportModel Successful Response
   * @throws ApiError
   */
  public static getAllImportsForProjectApiImportsListGet(
    data: $OpenApiTs["/api/imports/list"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/list"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/imports/list",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Import Details
   * @returns ImportModel Successful Response
   * @throws ApiError
   */
  public static getImportDetailsApiImportsImportImportIdGet(
    data: $OpenApiTs["/api/imports/import/{import_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import/{import_id}"]["get"]["res"][200]>> {
    const { importId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/imports/import/{import_id}",
      path: {
        import_id: importId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Trigger Import
   * @returns string Successful Response
   * @throws ApiError
   */
  public static triggerImportApiImportsImportImportIdPost(
    data: $OpenApiTs["/api/imports/import/{import_id}"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import/{import_id}"]["post"]["res"][200]>> {
    const { importId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/imports/import/{import_id}",
      path: {
        import_id: importId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Import Counts
   * @returns number Successful Response
   * @throws ApiError
   */
  public static getImportCountsApiImportsImportImportIdCountGet(
    data: $OpenApiTs["/api/imports/import/{import_id}/count/"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import/{import_id}/count/"]["get"]["res"][200]>> {
    const { importId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/imports/import/{import_id}/count/",
      path: {
        import_id: importId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Put Import Details
   * @returns string Successful Response
   * @throws ApiError
   */
  public static putImportDetailsApiImportsImportPut(
    data: $OpenApiTs["/api/imports/import"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/imports/import",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Import Details
   * @returns string Successful Response
   * @throws ApiError
   */
  public static deleteImportDetailsApiImportsImportDeleteImportIdDelete(
    data: $OpenApiTs["/api/imports/import/delete/{import_id}"]["delete"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/imports/import/delete/{import_id}"]["delete"]["res"][200]>> {
    const { importId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/imports/import/delete/{import_id}",
      path: {
        import_id: importId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class EventsService {
  /**
   * Emit
   * This route can be used to trigger an event on the system.
   * FIXME: This should require some sort of authentication!
   *
   * :param event: event (incl optional payload) to emit
   * :return: void
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static emitApiEventsEmitPost(
    data: $OpenApiTs["/api/events/emit"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/events/emit"]["post"]["res"][200]>> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/events/emit",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class HighlightersService {
  /**
   * Get Scope Highlighters
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getScopeHighlightersApiHighlightersScopeAssignmentScopeIdGet(
    data: $OpenApiTs["/api/highlighters/scope/{assignment_scope_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/highlighters/scope/{assignment_scope_id}"]["get"]["res"][200]>> {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/highlighters/scope/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Project Highlighters
   * @returns HighlighterModel Successful Response
   * @throws ApiError
   */
  public static getProjectHighlightersApiHighlightersProjectGet(
    data: $OpenApiTs["/api/highlighters/project"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/highlighters/project"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/highlighters/project",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Upsert Highlighter
   * @returns string Successful Response
   * @throws ApiError
   */
  public static upsertHighlighterApiHighlightersProjectPut(
    data: $OpenApiTs["/api/highlighters/project"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/highlighters/project"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/highlighters/project",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Highlighter
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getHighlighterApiHighlightersHighlighterIdGet(
    data: $OpenApiTs["/api/highlighters/{highlighter_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/highlighters/{highlighter_id}"]["get"]["res"][200]>> {
    const { highlighterId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/highlighters/{highlighter_id}",
      path: {
        highlighter_id: highlighterId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class StatsService {
  /**
   * Get Basic Stats
   * @returns BasicProjectStats Successful Response
   * @throws ApiError
   */
  public static getBasicStatsApiStatsBasicsGet(
    data: $OpenApiTs["/api/stats/basics"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/stats/basics"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/stats/basics",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Annotator Ranking
   * @returns RankEntry Successful Response
   * @throws ApiError
   */
  public static getAnnotatorRankingApiStatsRankGet(
    data: $OpenApiTs["/api/stats/rank"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/stats/rank"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/stats/rank",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Publication Year Histogram
   * @returns HistogramEntry Successful Response
   * @throws ApiError
   */
  public static getPublicationYearHistogramApiStatsHistogramYearsGet(
    data: $OpenApiTs["/api/stats/histogram/years"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/stats/histogram/years"]["get"]["res"][200]>> {
    const { xProjectId, fromYear, toYear } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/stats/histogram/years",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        from_year: fromYear,
        to_year: toYear,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class ExportService {
  /**
   * Get Annotations Csv
   * @returns string Successful Response
   * @throws ApiError
   */
  public static getAnnotationsCsvApiExportAnnotationsCsvPost(
    data: $OpenApiTs["/api/export/annotations/csv"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/export/annotations/csv"]["post"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/export/annotations/csv",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Export Baseinfo
   * @returns ProjectBaseInfo Successful Response
   * @throws ApiError
   */
  public static getExportBaseinfoApiExportProjectBaseinfoGet(
    data: $OpenApiTs["/api/export/project/baseinfo"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/export/project/baseinfo"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/export/project/baseinfo",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class SearchService {
  /**
   * Search Openalex
   * @returns SearchResult Successful Response
   * @throws ApiError
   */
  public static searchOpenalexApiSearchOpenalexSelectPost(
    data: $OpenApiTs["/api/search/openalex/select"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/search/openalex/select"]["post"]["res"][200]>> {
    const { query, xProjectId, limit, offset, defType, field, histogram, op, histogramFrom, histogramTo } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/search/openalex/select",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        query,
        limit,
        offset,
        def_type: defType,
        field,
        histogram,
        op,
        histogram_from: histogramFrom,
        histogram_to: histogramTo,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Term Expansion
   * @returns TermStats Successful Response
   * @throws ApiError
   */
  public static termExpansionApiSearchOpenalexTermsGet(
    data: $OpenApiTs["/api/search/openalex/terms"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/search/openalex/terms"]["get"]["res"][200]>> {
    const { termPrefix, xProjectId, limit } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/search/openalex/terms",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        term_prefix: termPrefix,
        limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Nql Query
   * @returns QueryResult Successful Response
   * @throws ApiError
   */
  public static nqlQueryApiSearchNqlQueryPost(
    data: $OpenApiTs["/api/search/nql/query"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/search/nql/query"]["post"]["res"][200]>> {
    const { xProjectId, requestBody, page, limit } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/search/nql/query",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        page,
        limit,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Nql Query Count
   * @returns number Successful Response
   * @throws ApiError
   */
  public static nqlQueryCountApiSearchNqlCountPost(
    data: $OpenApiTs["/api/search/nql/count"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/search/nql/count"]["post"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/search/nql/count",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class EvaluationService {
  /**
   * Get Project Scopes
   * @returns LabelScope Successful Response
   * @throws ApiError
   */
  public static getProjectScopesApiEvalTrackingScopesGet(
    data: $OpenApiTs["/api/eval/tracking/scopes"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/tracking/scopes"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/tracking/scopes",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Resolutions For Scope
   * @returns BotAnnotationMetaDataBaseModel Successful Response
   * @throws ApiError
   */
  public static getResolutionsForScopeApiEvalResolutionsGet(
    data: $OpenApiTs["/api/eval/resolutions"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/resolutions"]["get"]["res"][200]>> {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/resolutions",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        assignment_scope_id: assignmentScopeId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Project Trackers
   * @returns DehydratedAnnotationTracker Successful Response
   * @throws ApiError
   */
  public static getProjectTrackersApiEvalTrackingTrackersGet(
    data: $OpenApiTs["/api/eval/tracking/trackers"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/tracking/trackers"]["get"]["res"][200]>> {
    const { xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/tracking/trackers",
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Tracker
   * @returns AnnotationTrackerModel Successful Response
   * @throws ApiError
   */
  public static getTrackerApiEvalTrackingTrackerTrackerIdGet(
    data: $OpenApiTs["/api/eval/tracking/tracker/{tracker_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/tracking/tracker/{tracker_id}"]["get"]["res"][200]>> {
    const { trackerId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/tracking/tracker/{tracker_id}",
      path: {
        tracker_id: trackerId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Save Tracker
   * @returns string Successful Response
   * @throws ApiError
   */
  public static saveTrackerApiEvalTrackingTrackerPut(
    data: $OpenApiTs["/api/eval/tracking/tracker"]["put"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/tracking/tracker"]["put"]["res"][200]>> {
    const { xProjectId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/eval/tracking/tracker",
      headers: {
        "x-project-id": xProjectId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Tracker
   * @returns AnnotationTrackerModel Successful Response
   * @throws ApiError
   */
  public static updateTrackerApiEvalTrackingRefreshPost(
    data: $OpenApiTs["/api/eval/tracking/refresh"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/tracking/refresh"]["post"]["res"][200]>> {
    const { trackerId, xProjectId, batchSize, reset } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/eval/tracking/refresh",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        tracker_id: trackerId,
        batch_size: batchSize,
        reset,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Irr
   * @returns AnnotationQualityModel Successful Response
   * @throws ApiError
   */
  public static getIrrApiEvalQualityLoadAssignmentScopeIdGet(
    data: $OpenApiTs["/api/eval/quality/load/{assignment_scope_id}"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/quality/load/{assignment_scope_id}"]["get"]["res"][200]>> {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/quality/load/{assignment_scope_id}",
      path: {
        assignment_scope_id: assignmentScopeId,
      },
      headers: {
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Recompute Irr
   * @returns AnnotationQualityModel Successful Response
   * @throws ApiError
   */
  public static recomputeIrrApiEvalQualityComputeGet(
    data: $OpenApiTs["/api/eval/quality/compute"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/eval/quality/compute"]["get"]["res"][200]>> {
    const { assignmentScopeId, xProjectId, botAnnotationMetadataId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/eval/quality/compute",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        assignment_scope_id: assignmentScopeId,
        bot_annotation_metadata_id: botAnnotationMetadataId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class MailingService {
  /**
   * Reset Password
   * @returns string Successful Response
   * @throws ApiError
   */
  public static resetPasswordApiMailResetPasswordUsernamePost(
    data: $OpenApiTs["/api/mail/reset-password/{username}"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/mail/reset-password/{username}"]["post"]["res"][200]>> {
    const { username } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/mail/reset-password/{username}",
      path: {
        username,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Welcome Mail
   * @returns string Successful Response
   * @throws ApiError
   */
  public static welcomeMailApiMailWelcomePost(
    data: $OpenApiTs["/api/mail/welcome"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/mail/welcome"]["post"]["res"][200]>> {
    const { username, password } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/mail/welcome",
      query: {
        username,
        password,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Remind Users Assigment
   * @returns string Successful Response
   * @throws ApiError
   */
  public static remindUsersAssigmentApiMailAssignmentReminderPost(
    data: $OpenApiTs["/api/mail/assignment-reminder"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/mail/assignment-reminder"]["post"]["res"][200]>> {
    const { assignmentScopeId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/mail/assignment-reminder",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        assignment_scope_id: assignmentScopeId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class PipesService {
  /**
   * Get Artefacts
   * @returns FileOnDisk Successful Response
   * @throws ApiError
   */
  public static getArtefactsApiPipesArtefactsListGet(
    data: $OpenApiTs["/api/pipes/artefacts/list"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/list"]["get"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/artefacts/list",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Task Log
   * @returns string Successful Response
   * @throws ApiError
   */
  public static getTaskLogApiPipesArtefactsLogGet(
    data: $OpenApiTs["/api/pipes/artefacts/log"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/log"]["get"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/artefacts/log",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get File
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getFileApiPipesArtefactsFileGet(
    data: $OpenApiTs["/api/pipes/artefacts/file"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/file"]["get"]["res"][200]>> {
    const { filename, xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/artefacts/file",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      query: {
        filename,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Archive
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getArchiveApiPipesArtefactsFilesGet(
    data: $OpenApiTs["/api/pipes/artefacts/files"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/files"]["get"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/artefacts/files",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Upload File
   * @returns string Successful Response
   * @throws ApiError
   */
  public static uploadFileApiPipesArtefactsFilesUploadPost(
    data: $OpenApiTs["/api/pipes/artefacts/files/upload"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/files/upload"]["post"]["res"][200]>> {
    const { xProjectId, formData, folder } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/pipes/artefacts/files/upload",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        folder,
      },
      formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Upload Files
   * @returns string Successful Response
   * @throws ApiError
   */
  public static uploadFilesApiPipesArtefactsFilesUploadManyPost(
    data: $OpenApiTs["/api/pipes/artefacts/files/upload-many"]["post"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/artefacts/files/upload-many"]["post"]["res"][200]>> {
    const { xProjectId, formData, folder } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/pipes/artefacts/files/upload-many",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        folder,
      },
      formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Search Tasks
   * @returns TaskModel Successful Response
   * @throws ApiError
   */
  public static searchTasksApiPipesTasksGet(
    data: $OpenApiTs["/api/pipes/tasks"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/tasks"]["get"]["res"][200]>> {
    const { xProjectId, functionName, fingerprint, userId, location, status, orderByFields } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/tasks",
      headers: {
        "x-project-id": xProjectId,
      },
      query: {
        function_name: functionName,
        fingerprint,
        user_id: userId,
        location,
        status,
        order_by_fields: orderByFields,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Task
   * @returns TaskModel Successful Response
   * @throws ApiError
   */
  public static getTaskApiPipesTaskGet(
    data: $OpenApiTs["/api/pipes/task"]["get"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/task"]["get"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/pipes/task",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Task
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteTaskApiPipesTaskDelete(
    data: $OpenApiTs["/api/pipes/task"]["delete"]["req"],
  ): CancelablePromise<ApiResult<$OpenApiTs["/api/pipes/task"]["delete"]["res"][200]>> {
    const { xTaskId, xProjectId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/pipes/task",
      headers: {
        "x-task-id": xTaskId,
        "x-project-id": xProjectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}
