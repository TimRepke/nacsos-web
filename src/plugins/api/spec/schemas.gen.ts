// This file is auto-generated by @hey-api/openapi-ts
/* eslint-disable  @typescript-eslint/no-unused-vars */

export const $AbstractFilter = {
  properties: {
    filter: {
      type: "string",
      enum: ["abstract"],
      const: "abstract",
      title: "Filter",
      default: "abstract",
    },
    comp: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Comp",
    },
    size: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Size",
    },
    empty: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Empty",
    },
  },
  type: "object",
  title: "AbstractFilter",
} as const;

export const $AcademicAuthorModel = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    surname_initials: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Surname Initials",
    },
    email: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Email",
    },
    orcid: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Orcid",
    },
    scopus_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Scopus Id",
    },
    openalex_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Openalex Id",
    },
    s2_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "S2 Id",
    },
    affiliations: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/AffiliationModel",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Affiliations",
    },
  },
  type: "object",
  required: ["name"],
  title: "AcademicAuthorModel",
} as const;

export const $AcademicItemImport = {
  properties: {
    sources: {
      items: {
        type: "string",
        format: "path",
      },
      type: "array",
      title: "Sources",
    },
    kind: {
      type: "string",
      enum: ["academic"],
      const: "academic",
      title: "Kind",
      default: "academic",
    },
  },
  type: "object",
  required: ["sources"],
  title: "AcademicItemImport",
} as const;

export const $AcademicItemModel = {
  properties: {
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Item Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    type: {
      $ref: "#/components/schemas/ItemType",
      default: "academic",
    },
    text: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Text",
    },
    doi: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Doi",
    },
    wos_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Wos Id",
    },
    scopus_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Scopus Id",
    },
    openalex_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Openalex Id",
    },
    s2_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "S2 Id",
    },
    pubmed_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Pubmed Id",
    },
    dimensions_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Dimensions Id",
    },
    title: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Title",
    },
    title_slug: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Title Slug",
    },
    publication_year: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Publication Year",
    },
    source: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Source",
    },
    keywords: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Keywords",
    },
    authors: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/AcademicAuthorModel",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Authors",
    },
    meta: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  title: "AcademicItemModel",
  description: "Corresponds to db.schema.items.academic.AcademicItem",
} as const;

export const $AffiliationModel = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    country: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Country",
    },
    openalex_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Openalex Id",
    },
    s2_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "S2 Id",
    },
  },
  type: "object",
  required: ["name"],
  title: "AffiliationModel",
} as const;

export const $AnnotatedItem = {
  properties: {
    scheme: {
      $ref: "#/components/schemas/AnnotationSchemeModel",
    },
    assignment: {
      $ref: "#/components/schemas/AssignmentModel",
    },
  },
  type: "object",
  required: ["scheme", "assignment"],
  title: "AnnotatedItem",
} as const;

export const $AnnotationFilter = {
  properties: {
    filter: {
      type: "string",
      enum: ["annotation"],
      const: "annotation",
      title: "Filter",
      default: "annotation",
    },
    incl: {
      type: "boolean",
      title: "Incl",
    },
    scopes: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Scopes",
    },
    scheme: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Scheme",
    },
  },
  type: "object",
  required: ["incl"],
  title: "AnnotationFilter",
} as const;

export const $AnnotationItem = {
  properties: {
    scheme: {
      $ref: "#/components/schemas/AnnotationSchemeModel",
    },
    assignment: {
      $ref: "#/components/schemas/AssignmentModel",
    },
    scope: {
      $ref: "#/components/schemas/AssignmentScopeModel",
    },
    item: {
      anyOf: [
        {
          $ref: "#/components/schemas/TwitterItemModel",
        },
        {
          $ref: "#/components/schemas/AcademicItemModel",
        },
        {
          $ref: "#/components/schemas/LexisNexisItemModel",
        },
        {
          $ref: "#/components/schemas/FullLexisNexisItemModel",
        },
        {
          $ref: "#/components/schemas/GenericItemModel",
        },
      ],
      title: "Item",
    },
  },
  type: "object",
  required: ["scheme", "assignment", "scope", "item"],
  title: "AnnotationItem",
} as const;

export const $AnnotationModel = {
  properties: {
    value_bool: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Value Bool",
    },
    value_int: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Value Int",
    },
    value_float: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Value Float",
    },
    value_str: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Value Str",
    },
    multi_int: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Multi Int",
    },
    annotation_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Annotation Id",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
    assignment_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Assignment Id",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "User Id",
    },
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Item Id",
    },
    annotation_scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Annotation Scheme Id",
    },
    snippet_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Snippet Id",
    },
    key: {
      type: "string",
      title: "Key",
    },
    repeat: {
      type: "integer",
      title: "Repeat",
      default: 1,
    },
    parent: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Parent",
    },
  },
  type: "object",
  required: ["assignment_id", "user_id", "item_id", "annotation_scheme_id", "key"],
  title: "AnnotationModel",
  description: `Corresponds to db.models.annotations.Annotation

Annotation holds the judgement of a User for a specific Item in the context of an AnnotationScheme
as a response to an Assignment.
Once an Annotation exists, the Assignment should be considered (partially) resolved.

Note, that AnnotationScheme, User, and Item would be implicit by the Assignment.
However, for ease of use and in favour of fewer joins, this information is replicated here.

The Annotation refers to an AnnotationSchemeLabel defined in an AnnotationScheme, which is referred to by its \`key\`.
If the scheme allows the user to make repeated annotations for the same Label (\`key\`),
an offset is defined in \`repeat\` (e.g. for primary technology is "natural tech", secondary is "forests").

Note, that there is no database constraints on the completeness of an Assignment/AnnotationScheme.
The interface/backend code should be used to make sure, to either not allow partial fulfillment of an
AnnotationScheme or not display an Assignment as complete.`,
} as const;

export const $AnnotationQualityModel = {
  properties: {
    annotation_quality_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Annotation Quality Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    assignment_scope_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Assignment Scope Id",
    },
    bot_annotation_metadata_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Bot Annotation Metadata Id",
    },
    user_base: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "User Base",
    },
    annotations_base: {
      anyOf: [
        {
          items: {
            anyOf: [
              {
                items: {
                  type: "integer",
                },
                type: "array",
              },
              {
                type: "null",
              },
            ],
          },
          type: "array",
        },
        {
          items: {
            anyOf: [
              {
                type: "boolean",
              },
              {
                type: "null",
              },
            ],
          },
          type: "array",
        },
        {
          items: {
            anyOf: [
              {
                type: "integer",
              },
              {
                type: "null",
              },
            ],
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Annotations Base",
    },
    user_target: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "User Target",
    },
    annotations_target: {
      anyOf: [
        {
          items: {
            anyOf: [
              {
                type: "boolean",
              },
              {
                type: "null",
              },
            ],
          },
          type: "array",
        },
        {
          items: {
            anyOf: [
              {
                type: "integer",
              },
              {
                type: "null",
              },
            ],
          },
          type: "array",
        },
        {
          items: {
            anyOf: [
              {
                items: {
                  type: "integer",
                },
                type: "array",
              },
              {
                type: "null",
              },
            ],
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Annotations Target",
    },
    label_key: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Label Key",
    },
    label_value: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Label Value",
    },
    cohen: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Cohen",
    },
    fleiss: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Fleiss",
    },
    randolph: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Randolph",
    },
    krippendorff: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Krippendorff",
    },
    pearson: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Pearson",
    },
    pearson_p: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Pearson P",
    },
    kendall: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Kendall",
    },
    kendall_p: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Kendall P",
    },
    spearman: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Spearman",
    },
    spearman_p: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Spearman P",
    },
    precision: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Precision",
    },
    recall: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Recall",
    },
    f1: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "F1",
    },
    multi_overlap_mean: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Multi Overlap Mean",
    },
    multi_overlap_median: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Multi Overlap Median",
    },
    multi_overlap_std: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Multi Overlap Std",
    },
    num_items: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Num Items",
    },
    num_overlap: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Num Overlap",
    },
    num_agree: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Num Agree",
    },
    num_disagree: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Num Disagree",
    },
    perc_agree: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Perc Agree",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
  },
  type: "object",
  title: "AnnotationQualityModel",
  description: `Annotation Quality Trackers
Computing annotator agreements is a little too expensive to do on the fly. Hence, we capture different
quality metrics in this table; one row per assignment scope and label.`,
} as const;

export const $AnnotationSchemeInfo = {
  properties: {
    annotation_scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Annotation Scheme Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    inclusion_rule: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Inclusion Rule",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
  },
  type: "object",
  required: ["name"],
  title: "AnnotationSchemeInfo",
} as const;

export const $AnnotationSchemeLabel = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    key: {
      type: "string",
      title: "Key",
    },
    hint: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Hint",
    },
    max_repeat: {
      type: "integer",
      title: "Max Repeat",
      default: 1,
    },
    required: {
      type: "boolean",
      title: "Required",
      default: true,
    },
    dropdown: {
      type: "boolean",
      title: "Dropdown",
      default: false,
    },
    kind: {
      type: "string",
      enum: ["bool", "str", "float", "int", "single", "multi", "intext"],
      title: "Kind",
      default: "single",
    },
    choices: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/AnnotationSchemeLabelChoice",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Choices",
    },
    annotation: {
      anyOf: [
        {
          $ref: "#/components/schemas/AnnotationModel",
        },
        {
          type: "null",
        },
      ],
    },
  },
  type: "object",
  required: ["name", "key"],
  title: "AnnotationSchemeLabel",
} as const;

export const $AnnotationSchemeLabelChoice = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    hint: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Hint",
    },
    value: {
      type: "integer",
      title: "Value",
    },
    children: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/AnnotationSchemeLabel",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Children",
    },
  },
  type: "object",
  required: ["name", "value"],
  title: "AnnotationSchemeLabelChoice",
} as const;

export const $AnnotationSchemeLabelChoiceFlat = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    hint: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Hint",
    },
    value: {
      type: "integer",
      title: "Value",
    },
  },
  type: "object",
  required: ["name", "value"],
  title: "AnnotationSchemeLabelChoiceFlat",
} as const;

export const $AnnotationSchemeModel = {
  properties: {
    annotation_scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Annotation Scheme Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    inclusion_rule: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Inclusion Rule",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
    labels: {
      items: {
        $ref: "#/components/schemas/AnnotationSchemeLabel",
      },
      type: "array",
      title: "Labels",
    },
  },
  type: "object",
  required: ["name", "labels"],
  title: "AnnotationSchemeModel",
  description: `Corresponds to db.models.annotations.AnnotationScheme

AnnotationScheme defines the annotation scheme for a particular project.
Each project may have multiple AnnotationSchemes,
but projects cannot share the same scheme. In case they are technically the same,
the user would have to create a new copy of that scheme for a different project.

The actual annotation scheme is defined as a list of labels (see schemas.annotations.AnnotationSchemeLabel).
The other fields pose as meta-data.`,
} as const;

export const $AnnotationSchemeModelFlat = {
  properties: {
    annotation_scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Annotation Scheme Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    inclusion_rule: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Inclusion Rule",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
    labels: {
      items: {
        $ref: "#/components/schemas/FlattenedAnnotationSchemeLabel",
      },
      type: "array",
      title: "Labels",
    },
  },
  type: "object",
  required: ["name", "labels"],
  title: "AnnotationSchemeModelFlat",
  description: "Same as AnnotationSchemeModel but with flattened structure.",
} as const;

export const $AnnotationTrackerModel = {
  properties: {
    annotation_tracking_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Annotation Tracking Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
      ],
      title: "Project Id",
    },
    inclusion_rule: {
      type: "string",
      title: "Inclusion Rule",
    },
    majority: {
      type: "boolean",
      title: "Majority",
    },
    n_items_total: {
      type: "integer",
      title: "N Items Total",
    },
    batch_size: {
      type: "integer",
      title: "Batch Size",
    },
    recall_target: {
      type: "number",
      title: "Recall Target",
    },
    source_ids: {
      anyOf: [
        {
          items: {
            type: "string",
            format: "uuid",
          },
          type: "array",
        },
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Source Ids",
    },
    labels: {
      anyOf: [
        {
          items: {
            items: {
              type: "integer",
            },
            type: "array",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Labels",
    },
    recall: {
      anyOf: [
        {
          items: {
            anyOf: [
              {
                type: "number",
              },
              {
                type: "null",
              },
            ],
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Recall",
    },
    buscar: {
      anyOf: [
        {
          items: {
            prefixItems: [
              {
                type: "integer",
              },
              {
                anyOf: [
                  {
                    type: "number",
                  },
                  {
                    type: "null",
                  },
                ],
              },
            ],
            type: "array",
            maxItems: 2,
            minItems: 2,
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Buscar",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
  },
  type: "object",
  required: ["name", "project_id", "inclusion_rule", "majority", "n_items_total", "batch_size", "recall_target"],
  title: "AnnotationTrackerModel",
  description: `Tracker for annotation statistics.
This includes the latest stopping criterion (buscar) metrics and more.

You may have more than one tracker per project, for example for keeping track of different progresses.`,
} as const;

export const $AnnotationValue = {
  properties: {
    value_bool: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Value Bool",
    },
    value_int: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Value Int",
    },
    value_float: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Value Float",
    },
    value_str: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Value Str",
    },
    multi_int: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Multi Int",
    },
  },
  type: "object",
  title: "AnnotationValue",
} as const;

export const $AssignmentCounts = {
  properties: {
    num_total: {
      type: "integer",
      title: "Num Total",
    },
    num_open: {
      type: "integer",
      title: "Num Open",
    },
    num_partial: {
      type: "integer",
      title: "Num Partial",
    },
    num_full: {
      type: "integer",
      title: "Num Full",
    },
  },
  type: "object",
  required: ["num_total", "num_open", "num_partial", "num_full"],
  title: "AssignmentCounts",
} as const;

export const $AssignmentEditInfo = {
  properties: {
    scope_id: {
      type: "string",
      title: "Scope Id",
    },
    scheme_id: {
      type: "string",
      title: "Scheme Id",
    },
    item_id: {
      type: "string",
      title: "Item Id",
    },
    user_id: {
      type: "string",
      title: "User Id",
    },
    order: {
      type: "integer",
      title: "Order",
    },
  },
  type: "object",
  required: ["scope_id", "scheme_id", "item_id", "user_id", "order"],
  title: "AssignmentEditInfo",
} as const;

export const $AssignmentFilter = {
  properties: {
    filter: {
      type: "string",
      enum: ["assignment"],
      const: "assignment",
      title: "Filter",
      default: "assignment",
    },
    mode: {
      type: "integer",
      title: "Mode",
    },
    scopes: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Scopes",
    },
    scheme: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Scheme",
    },
  },
  type: "object",
  required: ["mode"],
  title: "AssignmentFilter",
} as const;

export const $AssignmentInfo = {
  properties: {
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "User Id",
    },
    username: {
      type: "string",
      title: "Username",
    },
    order: {
      type: "integer",
      title: "Order",
    },
    assignment_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Assignment Id",
    },
    status: {
      $ref: "#/components/schemas/AssignmentStatus",
    },
    labels: {
      anyOf: [
        {
          additionalProperties: {
            items: {
              $ref: "#/components/schemas/AssignmentInfoLabel",
            },
            type: "array",
          },
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Labels",
    },
  },
  type: "object",
  required: ["user_id", "username", "order", "assignment_id", "status"],
  title: "AssignmentInfo",
} as const;

export const $AssignmentInfoLabel = {
  properties: {
    repeat: {
      type: "integer",
      title: "Repeat",
    },
    value_int: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Value Int",
    },
    value_bool: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Value Bool",
    },
    multi_ind: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Multi Ind",
    },
  },
  type: "object",
  required: ["repeat"],
  title: "AssignmentInfoLabel",
} as const;

export const $AssignmentModel = {
  properties: {
    assignment_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Assignment Id",
    },
    assignment_scope_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Assignment Scope Id",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "User Id",
    },
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Item Id",
    },
    annotation_scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Annotation Scheme Id",
    },
    status: {
      $ref: "#/components/schemas/AssignmentStatus",
    },
    order: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Order",
    },
  },
  type: "object",
  required: ["assignment_scope_id", "user_id", "item_id", "annotation_scheme_id", "status"],
  title: "AssignmentModel",
  description: `Corresponds to db.models.annotations.Assignment

Assignment is used to request a user/annotator (User) to annotate a particular item (BaseItem) in the database
following a pre-defined annotation scheme (AnnotationScheme).

Each AnnotationScheme will have several Assignments.
Each User will "receive" several Assignments.
Each Item may have several Assignments (either in relation to different AnnotationSchemes or double-coding).
The Project is implicit by the AnnotationScheme.

The most common use-cases are:
  * Creating assignments in bulk at random (e.g. 3 users should annotate 50 documents each)
  * Creating assignments one at a time based on a set of rules (e.g. for double-coding, defined order, bias, ...)
  * Creating assignments in small batches or one-by-one in prioritised annotation settings`,
} as const;

export const $AssignmentScopeEntry = {
  properties: {
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Item Id",
    },
    first_occurrence: {
      type: "integer",
      title: "First Occurrence",
    },
    identifier: {
      type: "integer",
      title: "Identifier",
    },
    assignments: {
      items: {
        $ref: "#/components/schemas/AssignmentInfo",
      },
      type: "array",
      title: "Assignments",
    },
  },
  type: "object",
  required: ["item_id", "first_occurrence", "identifier", "assignments"],
  title: "AssignmentScopeEntry",
} as const;

export const $AssignmentScopeModel = {
  properties: {
    assignment_scope_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Assignment Scope Id",
    },
    annotation_scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Annotation Scheme Id",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    config: {
      anyOf: [
        {
          oneOf: [
            {
              $ref: "#/components/schemas/AssignmentScopeRandomWithExclusionConfig",
            },
            {
              $ref: "#/components/schemas/AssignmentScopeRandomWithNQLConfig",
            },
            {
              $ref: "#/components/schemas/AssignmentScopeRandomConfig",
            },
          ],
          discriminator: {
            propertyName: "config_type",
            mapping: {
              random: "#/components/schemas/AssignmentScopeRandomConfig",
              random_exclusion: "#/components/schemas/AssignmentScopeRandomWithExclusionConfig",
              random_nql: "#/components/schemas/AssignmentScopeRandomWithNQLConfig",
            },
          },
        },
        {
          type: "null",
        },
      ],
      title: "Config",
    },
  },
  type: "object",
  required: ["annotation_scheme_id", "name"],
  title: "AssignmentScopeModel",
  description: `AssignmentScope can be used to logically group a set of Assignments.
For example, one may wish to re-use the same AnnotationScheme several times within a project
without copying it each time. It may also be used to logically group different scopes of
the annotation process, for example to make it clear that different subsets of a dataset
are to be annotated.
Logically, this should be viewed as a hierarchical organisation
AnnotationScheme -> [AssignmentScope] -> Assignment -> Annotation`,
} as const;

export const $AssignmentScopeRandomConfig = {
  properties: {
    config_type: {
      type: "string",
      enum: ["random"],
      const: "random",
      title: "Config Type",
      default: "random",
    },
    users: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          items: {
            type: "string",
            format: "uuid",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Users",
    },
    num_items: {
      type: "integer",
      title: "Num Items",
    },
    min_assignments_per_item: {
      type: "integer",
      title: "Min Assignments Per Item",
    },
    max_assignments_per_item: {
      type: "integer",
      title: "Max Assignments Per Item",
    },
    num_multi_coded_items: {
      type: "integer",
      title: "Num Multi Coded Items",
    },
    random_seed: {
      type: "integer",
      title: "Random Seed",
    },
  },
  type: "object",
  required: [
    "num_items",
    "min_assignments_per_item",
    "max_assignments_per_item",
    "num_multi_coded_items",
    "random_seed",
  ],
  title: "AssignmentScopeRandomConfig",
} as const;

export const $AssignmentScopeRandomWithExclusionConfig = {
  properties: {
    config_type: {
      type: "string",
      enum: ["random_exclusion"],
      const: "random_exclusion",
      title: "Config Type",
      default: "random_exclusion",
    },
    users: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          items: {
            type: "string",
            format: "uuid",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Users",
    },
    num_items: {
      type: "integer",
      title: "Num Items",
    },
    min_assignments_per_item: {
      type: "integer",
      title: "Min Assignments Per Item",
    },
    max_assignments_per_item: {
      type: "integer",
      title: "Max Assignments Per Item",
    },
    num_multi_coded_items: {
      type: "integer",
      title: "Num Multi Coded Items",
    },
    random_seed: {
      type: "integer",
      title: "Random Seed",
    },
    excluded_scopes: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          items: {
            type: "string",
            format: "uuid",
          },
          type: "array",
        },
      ],
      title: "Excluded Scopes",
    },
  },
  type: "object",
  required: [
    "num_items",
    "min_assignments_per_item",
    "max_assignments_per_item",
    "num_multi_coded_items",
    "random_seed",
    "excluded_scopes",
  ],
  title: "AssignmentScopeRandomWithExclusionConfig",
} as const;

export const $AssignmentScopeRandomWithNQLConfig = {
  properties: {
    config_type: {
      type: "string",
      enum: ["random_nql"],
      const: "random_nql",
      title: "Config Type",
      default: "random_nql",
    },
    users: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          items: {
            type: "string",
            format: "uuid",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Users",
    },
    num_items: {
      type: "integer",
      title: "Num Items",
    },
    min_assignments_per_item: {
      type: "integer",
      title: "Min Assignments Per Item",
    },
    max_assignments_per_item: {
      type: "integer",
      title: "Max Assignments Per Item",
    },
    num_multi_coded_items: {
      type: "integer",
      title: "Num Multi Coded Items",
    },
    random_seed: {
      type: "integer",
      title: "Random Seed",
    },
    query_parsed: {
      oneOf: [
        {
          $ref: "#/components/schemas/FieldFilter",
        },
        {
          $ref: "#/components/schemas/FieldFilters",
        },
        {
          $ref: "#/components/schemas/LabelFilterMulti",
        },
        {
          $ref: "#/components/schemas/LabelFilterBool",
        },
        {
          $ref: "#/components/schemas/LabelFilterInt",
        },
        {
          $ref: "#/components/schemas/AssignmentFilter",
        },
        {
          $ref: "#/components/schemas/AnnotationFilter",
        },
        {
          $ref: "#/components/schemas/AbstractFilter",
        },
        {
          $ref: "#/components/schemas/ImportFilter",
        },
        {
          $ref: "#/components/schemas/MetaFilterBool",
        },
        {
          $ref: "#/components/schemas/MetaFilterInt",
        },
        {
          $ref: "#/components/schemas/MetaFilterStr",
        },
        {
          $ref: "#/components/schemas/SubQuery",
        },
      ],
      title: "Query Parsed",
      discriminator: {
        propertyName: "filter",
        mapping: {
          abstract: "#/components/schemas/AbstractFilter",
          annotation: "#/components/schemas/AnnotationFilter",
          assignment: "#/components/schemas/AssignmentFilter",
          field: "#/components/schemas/FieldFilter",
          field_mul: "#/components/schemas/FieldFilters",
          import: "#/components/schemas/ImportFilter",
          label_bool: "#/components/schemas/LabelFilterBool",
          label_int: "#/components/schemas/LabelFilterInt",
          label_multi: "#/components/schemas/LabelFilterMulti",
          meta_bool: "#/components/schemas/MetaFilterBool",
          meta_int: "#/components/schemas/MetaFilterInt",
          meta_str: "#/components/schemas/MetaFilterStr",
          sub: "#/components/schemas/SubQuery",
        },
      },
    },
    query_str: {
      type: "string",
      title: "Query Str",
    },
  },
  type: "object",
  required: [
    "num_items",
    "min_assignments_per_item",
    "max_assignments_per_item",
    "num_multi_coded_items",
    "random_seed",
    "query_parsed",
    "query_str",
  ],
  title: "AssignmentScopeRandomWithNQLConfig",
} as const;

export const $AssignmentStatus = {
  type: "string",
  enum: ["FULL", "PARTIAL", "OPEN", "INVALID"],
  title: "AssignmentStatus",
} as const;

export const $AuthTokenModel = {
  properties: {
    token_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Token Id",
    },
    username: {
      type: "string",
      title: "Username",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
    valid_till: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Valid Till",
    },
  },
  type: "object",
  required: ["token_id", "username"],
  title: "AuthTokenModel",
} as const;

export const $BasicProjectStats = {
  properties: {
    num_items: {
      type: "integer",
      title: "Num Items",
    },
    num_imports: {
      type: "integer",
      title: "Num Imports",
    },
    num_schemes: {
      type: "integer",
      title: "Num Schemes",
    },
    num_scopes: {
      type: "integer",
      title: "Num Scopes",
    },
    num_labels: {
      type: "integer",
      title: "Num Labels",
    },
    num_labeled_items: {
      type: "integer",
      title: "Num Labeled Items",
    },
  },
  type: "object",
  required: ["num_items", "num_imports", "num_schemes", "num_scopes", "num_labels", "num_labeled_items"],
  title: "BasicProjectStats",
} as const;

export const $Body_login_for_access_token_api_login_token_post = {
  properties: {
    grant_type: {
      anyOf: [
        {
          type: "string",
          pattern: "password",
        },
        {
          type: "null",
        },
      ],
      title: "Grant Type",
    },
    username: {
      type: "string",
      title: "Username",
    },
    password: {
      type: "string",
      title: "Password",
    },
    scope: {
      type: "string",
      title: "Scope",
      default: "",
    },
    client_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Client Id",
    },
    client_secret: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Client Secret",
    },
  },
  type: "object",
  required: ["username", "password"],
  title: "Body_login_for_access_token_api_login_token_post",
} as const;

export const $Body_news_mail_api_mail_news_post = {
  properties: {
    subject: {
      type: "string",
      title: "Subject",
    },
    body: {
      type: "string",
      title: "Body",
    },
  },
  type: "object",
  required: ["subject", "body"],
  title: "Body_news_mail_api_mail_news_post",
} as const;

export const $Body_save_resolved_annotations_api_annotations_config_resolve__put = {
  properties: {
    settings: {
      $ref: "#/components/schemas/BotMetaResolveBase",
    },
    matrix: {
      additionalProperties: {
        additionalProperties: {
          $ref: "#/components/schemas/ResolutionCell",
        },
        type: "object",
      },
      type: "object",
      title: "Matrix",
    },
  },
  type: "object",
  required: ["settings", "matrix"],
  title: "Body_save_resolved_annotations_api_annotations_config_resolve__put",
} as const;

export const $Body_upload_file_api_pipes_artefacts_files_upload_post = {
  properties: {
    file: {
      type: "string",
      format: "binary",
      title: "File",
    },
  },
  type: "object",
  required: ["file"],
  title: "Body_upload_file_api_pipes_artefacts_files_upload_post",
} as const;

export const $Body_upload_files_api_pipes_artefacts_files_upload_many_post = {
  properties: {
    file: {
      items: {
        type: "string",
        format: "binary",
      },
      type: "array",
      title: "File",
    },
  },
  type: "object",
  required: ["file"],
  title: "Body_upload_files_api_pipes_artefacts_files_upload_many_post",
} as const;

export const $BotAnnotationMetaDataBaseModel = {
  properties: {
    bot_annotation_metadata_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Bot Annotation Metadata Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    kind: {
      $ref: "#/components/schemas/BotKind",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Project Id",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
    assignment_scope_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Assignment Scope Id",
    },
    annotation_scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Annotation Scheme Id",
    },
  },
  type: "object",
  required: ["name", "kind", "project_id"],
  title: "BotAnnotationMetaDataBaseModel",
} as const;

export const $BotAnnotationModel = {
  properties: {
    value_bool: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Value Bool",
    },
    value_int: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Value Int",
    },
    value_float: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Value Float",
    },
    value_str: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Value Str",
    },
    multi_int: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Multi Int",
    },
    bot_annotation_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Bot Annotation Id",
    },
    bot_annotation_metadata_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Bot Annotation Metadata Id",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Item Id",
    },
    parent: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Parent",
    },
    key: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Key",
    },
    repeat: {
      type: "integer",
      title: "Repeat",
      default: 1,
    },
    order: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Order",
    },
    confidence: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Confidence",
    },
  },
  type: "object",
  required: ["item_id"],
  title: "BotAnnotationModel",
} as const;

export const $BotAnnotationResolution = {
  properties: {
    bot_annotation_metadata_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Bot Annotation Metadata Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    kind: {
      $ref: "#/components/schemas/BotKind",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Project Id",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
    assignment_scope_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Assignment Scope Id",
    },
    annotation_scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Annotation Scheme Id",
    },
    meta: {
      $ref: "#/components/schemas/BotMetaResolve",
    },
  },
  type: "object",
  required: ["name", "kind", "project_id", "assignment_scope_id", "annotation_scheme_id", "meta"],
  title: "BotAnnotationResolution",
} as const;

export const $BotKind = {
  type: "string",
  enum: ["CLASSIFICATION", "RULES", "TOPICS", "RESOLVE", "SCRIPT"],
  title: "BotKind",
} as const;

export const $BotMetaInfo = {
  properties: {
    bot_annotation_metadata_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Bot Annotation Metadata Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    kind: {
      $ref: "#/components/schemas/BotKind",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Project Id",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
    assignment_scope_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Assignment Scope Id",
    },
    annotation_scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Annotation Scheme Id",
    },
    num_annotations: {
      type: "integer",
      title: "Num Annotations",
    },
    num_annotated_items: {
      type: "integer",
      title: "Num Annotated Items",
    },
  },
  type: "object",
  required: ["name", "kind", "project_id", "num_annotations", "num_annotated_items"],
  title: "BotMetaInfo",
} as const;

export const $BotMetaResolve = {
  properties: {
    algorithm: {
      $ref: "#/components/schemas/ResolutionMethod",
    },
    ignore_hierarchy: {
      type: "boolean",
      title: "Ignore Hierarchy",
    },
    ignore_repeat: {
      type: "boolean",
      title: "Ignore Repeat",
    },
    snapshot: {
      items: {
        $ref: "#/components/schemas/SnapshotEntry",
      },
      type: "array",
      title: "Snapshot",
    },
    resolutions: {
      items: {
        $ref: "#/components/schemas/ResolutionSnapshotEntry",
      },
      type: "array",
      title: "Resolutions",
    },
  },
  type: "object",
  required: ["algorithm", "ignore_hierarchy", "ignore_repeat", "snapshot", "resolutions"],
  title: "BotMetaResolve",
} as const;

export const $BotMetaResolveBase = {
  properties: {
    algorithm: {
      $ref: "#/components/schemas/ResolutionMethod",
    },
    ignore_hierarchy: {
      type: "boolean",
      title: "Ignore Hierarchy",
    },
    ignore_repeat: {
      type: "boolean",
      title: "Ignore Repeat",
    },
  },
  type: "object",
  required: ["algorithm", "ignore_hierarchy", "ignore_repeat"],
  title: "BotMetaResolveBase",
} as const;

export const $Cashtag = {
  properties: {
    start: {
      type: "integer",
      title: "Start",
    },
    end: {
      type: "integer",
      title: "End",
    },
    tag: {
      type: "string",
      title: "Tag",
    },
  },
  type: "object",
  required: ["start", "end", "tag"],
  title: "Cashtag",
} as const;

export const $ContextAnnotation = {
  properties: {
    domain_id: {
      type: "string",
      title: "Domain Id",
    },
    domain_name: {
      type: "string",
      title: "Domain Name",
    },
    entity_id: {
      type: "string",
      title: "Entity Id",
    },
    entity_name: {
      type: "string",
      title: "Entity Name",
    },
  },
  type: "object",
  required: ["domain_id", "domain_name", "entity_id", "entity_name"],
  title: "ContextAnnotation",
  description: `Flattened and reduced version of the context_annotation object
https://developer.twitter.com/en/docs/twitter-api/annotations/overview

NOTE: Under the assumption that we could always recover the \`description\`
      of the domain and entity, this information is not stored to save space.`,
} as const;

export const $DehydratedAnnotationTracker = {
  properties: {
    annotation_tracking_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Annotation Tracking Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
  },
  type: "object",
  required: ["name"],
  title: "DehydratedAnnotationTracker",
} as const;

export const $DehydratedAssignment = {
  properties: {
    assignment_id: {
      type: "string",
      title: "Assignment Id",
    },
    user_id: {
      type: "string",
      title: "User Id",
    },
    item_id: {
      type: "string",
      title: "Item Id",
    },
    username: {
      type: "string",
      title: "Username",
    },
    status: {
      $ref: "#/components/schemas/AssignmentStatus",
    },
    order: {
      type: "integer",
      title: "Order",
    },
  },
  type: "object",
  required: ["assignment_id", "user_id", "item_id", "username", "status", "order"],
  title: "DehydratedAssignment",
} as const;

export const $DehydratedUser = {
  properties: {
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "User Id",
    },
    username: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Username",
    },
    full_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Full Name",
    },
  },
  type: "object",
  title: "DehydratedUser",
} as const;

export const $Event = {
  properties: {
    event: {
      type: "string",
      enum: ["ExampleEvent", "ExampleSubEvent"],
      title: "Event",
    },
    payload: {
      anyOf: [
        {
          $ref: "#/components/schemas/ExampleEvent",
        },
        {
          $ref: "#/components/schemas/ExampleSubEvent",
        },
      ],
      title: "Payload",
    },
  },
  type: "object",
  required: ["event", "payload"],
  title: "Event",
} as const;

export const $ExampleEvent = {
  properties: {
    payload_a: {
      type: "string",
      title: "Payload A",
    },
  },
  type: "object",
  required: ["payload_a"],
  title: "ExampleEvent",
} as const;

export const $ExampleSubEvent = {
  properties: {
    payload_a: {
      type: "string",
      title: "Payload A",
    },
  },
  type: "object",
  required: ["payload_a"],
  title: "ExampleSubEvent",
} as const;

export const $ExportRequest = {
  properties: {
    labels: {
      items: {
        $ref: "#/components/schemas/LabelOptions",
      },
      type: "array",
      title: "Labels",
    },
    nql_filter: {
      anyOf: [
        {
          oneOf: [
            {
              $ref: "#/components/schemas/FieldFilter",
            },
            {
              $ref: "#/components/schemas/FieldFilters",
            },
            {
              $ref: "#/components/schemas/LabelFilterMulti",
            },
            {
              $ref: "#/components/schemas/LabelFilterBool",
            },
            {
              $ref: "#/components/schemas/LabelFilterInt",
            },
            {
              $ref: "#/components/schemas/AssignmentFilter",
            },
            {
              $ref: "#/components/schemas/AnnotationFilter",
            },
            {
              $ref: "#/components/schemas/AbstractFilter",
            },
            {
              $ref: "#/components/schemas/ImportFilter",
            },
            {
              $ref: "#/components/schemas/MetaFilterBool",
            },
            {
              $ref: "#/components/schemas/MetaFilterInt",
            },
            {
              $ref: "#/components/schemas/MetaFilterStr",
            },
            {
              $ref: "#/components/schemas/SubQuery",
            },
          ],
          discriminator: {
            propertyName: "filter",
            mapping: {
              abstract: "#/components/schemas/AbstractFilter",
              annotation: "#/components/schemas/AnnotationFilter",
              assignment: "#/components/schemas/AssignmentFilter",
              field: "#/components/schemas/FieldFilter",
              field_mul: "#/components/schemas/FieldFilters",
              import: "#/components/schemas/ImportFilter",
              label_bool: "#/components/schemas/LabelFilterBool",
              label_int: "#/components/schemas/LabelFilterInt",
              label_multi: "#/components/schemas/LabelFilterMulti",
              meta_bool: "#/components/schemas/MetaFilterBool",
              meta_int: "#/components/schemas/MetaFilterInt",
              meta_str: "#/components/schemas/MetaFilterStr",
              sub: "#/components/schemas/SubQuery",
            },
          },
        },
        {
          type: "null",
        },
      ],
      title: "Nql Filter",
    },
    bot_annotation_metadata_ids: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Bot Annotation Metadata Ids",
    },
    assignment_scope_ids: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Assignment Scope Ids",
    },
    user_ids: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "User Ids",
    },
    ignore_hierarchy: {
      type: "boolean",
      title: "Ignore Hierarchy",
      default: true,
    },
    ignore_repeat: {
      type: "boolean",
      title: "Ignore Repeat",
      default: true,
    },
  },
  type: "object",
  required: ["labels"],
  title: "ExportRequest",
} as const;

export const $FieldFilter = {
  properties: {
    filter: {
      type: "string",
      enum: ["field"],
      const: "field",
      title: "Filter",
      default: "field",
    },
    field: {
      type: "string",
      enum: ["title", "abstract", "pub_year", "date", "source"],
      title: "Field",
    },
    value: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "integer",
        },
      ],
      title: "Value",
    },
    comp: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Comp",
    },
  },
  type: "object",
  required: ["field", "value"],
  title: "FieldFilter",
} as const;

export const $FieldFilters = {
  properties: {
    filter: {
      type: "string",
      enum: ["field_mul"],
      const: "field_mul",
      title: "Filter",
      default: "field_mul",
    },
    field: {
      type: "string",
      enum: ["doi", "item_id", "openalex_id"],
      title: "Field",
    },
    values: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Values",
    },
  },
  type: "object",
  required: ["field", "values"],
  title: "FieldFilters",
} as const;

export const $FileOnDisk = {
  properties: {
    path: {
      type: "string",
      title: "Path",
    },
    size: {
      type: "integer",
      title: "Size",
    },
  },
  type: "object",
  required: ["path", "size"],
  title: "FileOnDisk",
} as const;

export const $FlatLabel = {
  properties: {
    path: {
      items: {
        $ref: "#/components/schemas/Label",
      },
      type: "array",
      title: "Path",
    },
    repeat: {
      type: "integer",
      title: "Repeat",
    },
    path_key: {
      type: "string",
      title: "Path Key",
    },
    parent_int: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Parent Int",
    },
    parent_key: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Parent Key",
    },
    parent_value: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Parent Value",
    },
    name: {
      type: "string",
      title: "Name",
    },
    hint: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Hint",
    },
    key: {
      type: "string",
      title: "Key",
    },
    required: {
      type: "boolean",
      title: "Required",
    },
    max_repeat: {
      type: "integer",
      title: "Max Repeat",
    },
    kind: {
      type: "string",
      enum: ["bool", "str", "float", "int", "single", "multi", "intext"],
      title: "Kind",
    },
    choices: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/FlatLabelChoice",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Choices",
    },
  },
  type: "object",
  required: ["path", "repeat", "path_key", "name", "key", "required", "max_repeat", "kind"],
  title: "FlatLabel",
} as const;

export const $FlatLabelChoice = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    hint: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Hint",
    },
    value: {
      type: "integer",
      title: "Value",
    },
  },
  type: "object",
  required: ["name", "value"],
  title: "FlatLabelChoice",
} as const;

export const $FlattenedAnnotationSchemeLabel = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    hint: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Hint",
    },
    key: {
      type: "string",
      title: "Key",
    },
    required: {
      type: "boolean",
      title: "Required",
    },
    max_repeat: {
      type: "integer",
      title: "Max Repeat",
    },
    implicit_max_repeat: {
      type: "integer",
      title: "Implicit Max Repeat",
    },
    kind: {
      type: "string",
      enum: ["bool", "str", "float", "int", "single", "multi", "intext"],
      title: "Kind",
    },
    choices: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/AnnotationSchemeLabelChoiceFlat",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Choices",
    },
    parent_label: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Parent Label",
    },
    parent_choice: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Parent Choice",
    },
  },
  type: "object",
  required: ["name", "key", "required", "max_repeat", "implicit_max_repeat", "kind"],
  title: "FlattenedAnnotationSchemeLabel",
} as const;

export const $FullLexisNexisItemModel = {
  properties: {
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Item Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    type: {
      $ref: "#/components/schemas/ItemType",
      default: "lexis",
    },
    text: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Text",
    },
    teaser: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Teaser",
    },
    authors: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Authors",
    },
    sources: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/LexisNexisItemSourceModel",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Sources",
    },
  },
  type: "object",
  title: "FullLexisNexisItemModel",
} as const;

export const $GenericItemModel = {
  properties: {
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Item Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    type: {
      $ref: "#/components/schemas/ItemType",
      default: "generic",
    },
    text: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Text",
    },
    meta: {
      type: "object",
      title: "Meta",
    },
  },
  type: "object",
  required: ["meta"],
  title: "GenericItemModel",
  description: "Corresponds to db.models.items.generic.GenericItem",
} as const;

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: "#/components/schemas/ValidationError",
      },
      type: "array",
      title: "Detail",
    },
  },
  type: "object",
  title: "HTTPValidationError",
} as const;

export const $Hashtag = {
  properties: {
    start: {
      type: "integer",
      title: "Start",
    },
    end: {
      type: "integer",
      title: "End",
    },
    tag: {
      type: "string",
      title: "Tag",
    },
  },
  type: "object",
  required: ["start", "end", "tag"],
  title: "Hashtag",
} as const;

export const $HighlighterModel = {
  properties: {
    highlighter_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Highlighter Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Project Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    keywords: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Keywords",
    },
    style: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Style",
    },
  },
  type: "object",
  required: ["highlighter_id", "project_id", "name", "keywords"],
  title: "HighlighterModel",
  description: `A highlighter can be used in a project to highlight tokens in text to make
it easier for users to annotate documents when certain keywords are highlighted.

It is assumed, that a highlighter roughly corresponds to query terms.
Furthermore, keywords in a highlighter will typically be joined into
a regular expression group (e.g. "(keyword1|double keyword|wildcar.*)").

Each matching group will be wrapped in a highlight span in the frontend.`,
} as const;

export const $HistogramEntry = {
  properties: {
    bucket: {
      type: "string",
      format: "date-time",
      title: "Bucket",
    },
    num_items: {
      type: "integer",
      title: "Num Items",
    },
  },
  type: "object",
  required: ["bucket", "num_items"],
  title: "HistogramEntry",
} as const;

export const $IEUUID = {
  properties: {
    incl: {
      type: "boolean",
      title: "Incl",
    },
    uuid: {
      type: "string",
      title: "Uuid",
    },
  },
  type: "object",
  required: ["incl", "uuid"],
  title: "IEUUID",
} as const;

export const $ImportFilter = {
  properties: {
    filter: {
      type: "string",
      enum: ["import"],
      const: "import",
      title: "Filter",
      default: "import",
    },
    import_ids: {
      items: {
        $ref: "#/components/schemas/IEUUID",
      },
      type: "array",
      title: "Import Ids",
    },
  },
  type: "object",
  required: ["import_ids"],
  title: "ImportFilter",
} as const;

export const $ImportInfo = {
  properties: {
    import_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Import Id",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "User Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
      ],
      title: "Project Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      type: "string",
      title: "Description",
    },
    type: {
      type: "string",
      title: "Type",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    config: {
      anyOf: [
        {
          oneOf: [
            {
              $ref: "#/components/schemas/ScopusImport",
            },
            {
              $ref: "#/components/schemas/AcademicItemImport",
            },
            {
              $ref: "#/components/schemas/OpenAlexFileImport",
            },
            {
              $ref: "#/components/schemas/OpenAlexSolrImport",
            },
            {
              $ref: "#/components/schemas/WoSImport",
            },
          ],
          discriminator: {
            propertyName: "kind",
            mapping: {
              academic: "#/components/schemas/AcademicItemImport",
              "oa-file": "#/components/schemas/OpenAlexFileImport",
              "oa-solr": "#/components/schemas/OpenAlexSolrImport",
              scopus: "#/components/schemas/ScopusImport",
              wos: "#/components/schemas/WoSImport",
            },
          },
        },
        {
          type: "null",
        },
      ],
      title: "Config",
    },
    num_revisions: {
      type: "integer",
      title: "Num Revisions",
    },
    num_items: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Num Items",
    },
  },
  type: "object",
  required: ["project_id", "name", "description", "type", "num_revisions"],
  title: "ImportInfo",
} as const;

export const $ImportModel = {
  properties: {
    import_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Import Id",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "User Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
      ],
      title: "Project Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      type: "string",
      title: "Description",
    },
    type: {
      type: "string",
      title: "Type",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    config: {
      anyOf: [
        {
          oneOf: [
            {
              $ref: "#/components/schemas/ScopusImport",
            },
            {
              $ref: "#/components/schemas/AcademicItemImport",
            },
            {
              $ref: "#/components/schemas/OpenAlexFileImport",
            },
            {
              $ref: "#/components/schemas/OpenAlexSolrImport",
            },
            {
              $ref: "#/components/schemas/WoSImport",
            },
          ],
          discriminator: {
            propertyName: "kind",
            mapping: {
              academic: "#/components/schemas/AcademicItemImport",
              "oa-file": "#/components/schemas/OpenAlexFileImport",
              "oa-solr": "#/components/schemas/OpenAlexSolrImport",
              scopus: "#/components/schemas/ScopusImport",
              wos: "#/components/schemas/WoSImport",
            },
          },
        },
        {
          type: "null",
        },
      ],
      title: "Config",
    },
  },
  type: "object",
  required: ["project_id", "name", "description", "type"],
  title: "ImportModel",
} as const;

export const $ImportRevisionDetails = {
  properties: {
    import_revision_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Import Revision Id",
    },
    import_revision_counter: {
      type: "integer",
      title: "Import Revision Counter",
    },
    time_created: {
      type: "string",
      format: "date-time",
      title: "Time Created",
    },
    pipeline_task_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Pipeline Task Id",
    },
    import_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Import Id",
    },
    num_items_retrieved: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Num Items Retrieved",
    },
    num_items: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Num Items",
    },
    num_items_new: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Num Items New",
    },
    num_items_updated: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Num Items Updated",
    },
    num_items_removed: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Num Items Removed",
    },
    task: {
      anyOf: [
        {
          $ref: "#/components/schemas/TaskModel",
        },
        {
          type: "null",
        },
      ],
    },
  },
  type: "object",
  required: ["import_revision_counter", "time_created"],
  title: "ImportRevisionDetails",
} as const;

export const $ItemAnnotation = {
  properties: {
    value_bool: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Value Bool",
    },
    value_int: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Value Int",
    },
    value_float: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Value Float",
    },
    value_str: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Value Str",
    },
    multi_int: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Multi Int",
    },
    annotation_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Annotation Id",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
    assignment_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Assignment Id",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "User Id",
    },
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Item Id",
    },
    annotation_scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Annotation Scheme Id",
    },
    snippet_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Snippet Id",
    },
    key: {
      type: "string",
      title: "Key",
    },
    repeat: {
      type: "integer",
      title: "Repeat",
      default: 1,
    },
    parent: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Parent",
    },
    path: {
      items: {
        $ref: "#/components/schemas/Label",
      },
      type: "array",
      title: "Path",
    },
    old: {
      anyOf: [
        {
          $ref: "#/components/schemas/AnnotationValue",
        },
        {
          type: "null",
        },
      ],
    },
  },
  type: "object",
  required: ["assignment_id", "user_id", "item_id", "annotation_scheme_id", "key", "path"],
  title: "ItemAnnotation",
} as const;

export const $ItemType = {
  type: "string",
  enum: ["generic", "twitter", "academic", "patents", "lexis"],
  title: "ItemType",
} as const;

export const $ItemWithCount = {
  properties: {
    item_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
      ],
      title: "Item Id",
    },
    num_total: {
      type: "integer",
      title: "Num Total",
    },
    num_open: {
      type: "integer",
      title: "Num Open",
    },
    num_partial: {
      type: "integer",
      title: "Num Partial",
    },
    num_full: {
      type: "integer",
      title: "Num Full",
    },
  },
  type: "object",
  required: ["item_id", "num_total", "num_open", "num_partial", "num_full"],
  title: "ItemWithCount",
} as const;

export const $Label = {
  properties: {
    key: {
      type: "string",
      title: "Key",
    },
    repeat: {
      type: "integer",
      title: "Repeat",
    },
    value: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Value",
    },
  },
  type: "object",
  required: ["key", "repeat"],
  title: "Label",
  description: `Convenience type (corresponding to internal type in db annotation_label).
For Annotation or BotAnnotation, this is the combination of their respective key, repeat value.

Mainly used during resolving annotations.`,
} as const;

export const $LabelFilterBool = {
  properties: {
    scopes: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Scopes",
    },
    scheme: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Scheme",
    },
    users: {
      anyOf: [
        {
          $ref: "#/components/schemas/UsersFilter",
        },
        {
          type: "null",
        },
      ],
    },
    repeats: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Repeats",
    },
    key: {
      type: "string",
      title: "Key",
    },
    type: {
      type: "string",
      enum: ["user", "bot", "resolved"],
      title: "Type",
    },
    filter: {
      type: "string",
      enum: ["label_bool"],
      const: "label_bool",
      title: "Filter",
      default: "label_bool",
    },
    value_type: {
      type: "string",
      enum: ["bool"],
      const: "bool",
      title: "Value Type",
      default: "bool",
    },
    comp: {
      type: "string",
      enum: ["="],
      const: "=",
      title: "Comp",
      default: "=",
    },
    value_bool: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Value Bool",
    },
  },
  type: "object",
  required: ["key", "type"],
  title: "LabelFilterBool",
} as const;

export const $LabelFilterInt = {
  properties: {
    scopes: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Scopes",
    },
    scheme: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Scheme",
    },
    users: {
      anyOf: [
        {
          $ref: "#/components/schemas/UsersFilter",
        },
        {
          type: "null",
        },
      ],
    },
    repeats: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Repeats",
    },
    key: {
      type: "string",
      title: "Key",
    },
    type: {
      type: "string",
      enum: ["user", "bot", "resolved"],
      title: "Type",
    },
    filter: {
      type: "string",
      enum: ["label_int"],
      const: "label_int",
      title: "Filter",
      default: "label_int",
    },
    value_type: {
      type: "string",
      enum: ["int"],
      const: "int",
      title: "Value Type",
      default: "int",
    },
    value_int: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Value Int",
    },
    comp: {
      type: "string",
      title: "Comp",
    },
  },
  type: "object",
  required: ["key", "type", "comp"],
  title: "LabelFilterInt",
} as const;

export const $LabelFilterMulti = {
  properties: {
    scopes: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Scopes",
    },
    scheme: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Scheme",
    },
    users: {
      anyOf: [
        {
          $ref: "#/components/schemas/UsersFilter",
        },
        {
          type: "null",
        },
      ],
    },
    repeats: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Repeats",
    },
    key: {
      type: "string",
      title: "Key",
    },
    type: {
      type: "string",
      enum: ["user", "bot", "resolved"],
      title: "Type",
    },
    filter: {
      type: "string",
      enum: ["label_multi"],
      const: "label_multi",
      title: "Filter",
      default: "label_multi",
    },
    value_type: {
      type: "string",
      enum: ["multi"],
      const: "multi",
      title: "Value Type",
      default: "multi",
    },
    multi_int: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Multi Int",
    },
    comp: {
      type: "string",
      title: "Comp",
    },
  },
  type: "object",
  required: ["key", "type", "comp"],
  title: "LabelFilterMulti",
} as const;

export const $LabelOptions = {
  properties: {
    key: {
      type: "string",
      title: "Key",
    },
    options_int: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Options Int",
    },
    options_bool: {
      anyOf: [
        {
          items: {
            type: "boolean",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Options Bool",
    },
    options_multi: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Options Multi",
    },
    strings: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Strings",
    },
  },
  type: "object",
  required: ["key"],
  title: "LabelOptions",
} as const;

export const $LabelScope = {
  properties: {
    scope_id: {
      type: "string",
      title: "Scope Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    scope_type: {
      type: "string",
      enum: ["H", "R"],
      title: "Scope Type",
    },
  },
  type: "object",
  required: ["scope_id", "name", "scope_type"],
  title: "LabelScope",
} as const;

export const $LexisNexisItemModel = {
  properties: {
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Item Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    type: {
      $ref: "#/components/schemas/ItemType",
      default: "lexis",
    },
    text: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Text",
    },
    teaser: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Teaser",
    },
    authors: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Authors",
    },
  },
  type: "object",
  title: "LexisNexisItemModel",
} as const;

export const $LexisNexisItemSourceModel = {
  properties: {
    item_source_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Item Source Id",
    },
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Item Id",
    },
    lexis_id: {
      type: "string",
      title: "Lexis Id",
    },
    name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Name",
    },
    title: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Title",
    },
    section: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Section",
    },
    jurisdiction: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Jurisdiction",
    },
    location: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Location",
    },
    content_type: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Content Type",
    },
    published_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Published At",
    },
    updated_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Updated At",
    },
    meta: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  required: ["lexis_id"],
  title: "LexisNexisItemSourceModel",
} as const;

export const $MakeAssignmentsRequestModel = {
  properties: {
    annotation_scheme_id: {
      type: "string",
      title: "Annotation Scheme Id",
    },
    scope_id: {
      type: "string",
      title: "Scope Id",
    },
    config: {
      oneOf: [
        {
          $ref: "#/components/schemas/AssignmentScopeRandomWithExclusionConfig",
        },
        {
          $ref: "#/components/schemas/AssignmentScopeRandomWithNQLConfig",
        },
        {
          $ref: "#/components/schemas/AssignmentScopeRandomConfig",
        },
      ],
      title: "Config",
      discriminator: {
        propertyName: "config_type",
        mapping: {
          random: "#/components/schemas/AssignmentScopeRandomConfig",
          random_exclusion: "#/components/schemas/AssignmentScopeRandomWithExclusionConfig",
          random_nql: "#/components/schemas/AssignmentScopeRandomWithNQLConfig",
        },
      },
    },
    save: {
      type: "boolean",
      title: "Save",
      default: false,
    },
  },
  type: "object",
  required: ["annotation_scheme_id", "scope_id", "config"],
  title: "MakeAssignmentsRequestModel",
} as const;

export const $Mention = {
  properties: {
    start: {
      type: "integer",
      title: "Start",
    },
    end: {
      type: "integer",
      title: "End",
    },
    username: {
      type: "string",
      title: "Username",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "integer",
        },
      ],
      title: "User Id",
    },
  },
  type: "object",
  required: ["start", "end", "username", "user_id"],
  title: "Mention",
} as const;

export const $MetaFilterBool = {
  properties: {
    field: {
      type: "string",
      title: "Field",
    },
    filter: {
      type: "string",
      enum: ["meta_bool"],
      const: "meta_bool",
      title: "Filter",
      default: "meta_bool",
    },
    value_type: {
      type: "string",
      enum: ["bool"],
      const: "bool",
      title: "Value Type",
      default: "bool",
    },
    comp: {
      type: "string",
      enum: ["="],
      const: "=",
      title: "Comp",
      default: "=",
    },
    value: {
      type: "boolean",
      title: "Value",
    },
  },
  type: "object",
  required: ["field", "value"],
  title: "MetaFilterBool",
} as const;

export const $MetaFilterInt = {
  properties: {
    field: {
      type: "string",
      title: "Field",
    },
    filter: {
      type: "string",
      enum: ["meta_int"],
      const: "meta_int",
      title: "Filter",
      default: "meta_int",
    },
    value_type: {
      type: "string",
      enum: ["int"],
      const: "int",
      title: "Value Type",
      default: "int",
    },
    comp: {
      type: "string",
      title: "Comp",
    },
    value: {
      type: "integer",
      title: "Value",
    },
  },
  type: "object",
  required: ["field", "comp", "value"],
  title: "MetaFilterInt",
} as const;

export const $MetaFilterStr = {
  properties: {
    field: {
      type: "string",
      title: "Field",
    },
    filter: {
      type: "string",
      enum: ["meta_str"],
      const: "meta_str",
      title: "Filter",
      default: "meta_str",
    },
    value_type: {
      type: "string",
      enum: ["str"],
      const: "str",
      title: "Value Type",
      default: "str",
    },
    comp: {
      type: "string",
      enum: ["LIKE"],
      const: "LIKE",
      title: "Comp",
      default: "LIKE",
    },
    value: {
      type: "string",
      title: "Value",
    },
  },
  type: "object",
  required: ["field", "value"],
  title: "MetaFilterStr",
} as const;

export const $OpenAlexFileImport = {
  properties: {
    sources: {
      items: {
        type: "string",
        format: "path",
      },
      type: "array",
      title: "Sources",
    },
    kind: {
      type: "string",
      enum: ["oa-file"],
      const: "oa-file",
      title: "Kind",
      default: "oa-file",
    },
  },
  type: "object",
  required: ["sources"],
  title: "OpenAlexFileImport",
} as const;

export const $OpenAlexSolrImport = {
  properties: {
    kind: {
      type: "string",
      enum: ["oa-solr"],
      const: "oa-solr",
      title: "Kind",
      default: "oa-solr",
    },
    query: {
      type: "string",
      title: "Query",
    },
    def_type: {
      type: "string",
      enum: ["edismax", "lucene", "dismax"],
      title: "Def Type",
      default: "lucene",
    },
    field: {
      type: "string",
      enum: ["title", "abstract", "title_abstract"],
      title: "Field",
      default: "title_abstract",
    },
    op: {
      type: "string",
      enum: ["OR", "AND"],
      title: "Op",
      default: "AND",
    },
  },
  type: "object",
  required: ["query"],
  title: "OpenAlexSolrImport",
} as const;

export const $ProjectBaseInfo = {
  properties: {
    users: {
      items: {
        $ref: "#/components/schemas/ProjectBaseInfoEntry",
      },
      type: "array",
      title: "Users",
    },
    scopes: {
      items: {
        $ref: "#/components/schemas/ProjectBaseInfoScopeEntry",
      },
      type: "array",
      title: "Scopes",
    },
    bot_scopes: {
      items: {
        $ref: "#/components/schemas/ProjectBaseInfoEntry",
      },
      type: "array",
      title: "Bot Scopes",
    },
    labels: {
      additionalProperties: {
        $ref: "#/components/schemas/LabelOptions",
      },
      type: "object",
      title: "Labels",
    },
  },
  type: "object",
  required: ["users", "scopes", "bot_scopes", "labels"],
  title: "ProjectBaseInfo",
} as const;

export const $ProjectBaseInfoEntry = {
  properties: {
    id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
  },
  type: "object",
  required: ["id", "name"],
  title: "ProjectBaseInfoEntry",
} as const;

export const $ProjectBaseInfoScopeEntry = {
  properties: {
    id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    scheme_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Scheme Id",
    },
    scheme_name: {
      type: "string",
      title: "Scheme Name",
    },
  },
  type: "object",
  required: ["id", "name", "scheme_id", "scheme_name"],
  title: "ProjectBaseInfoScopeEntry",
} as const;

export const $ProjectInfo = {
  properties: {
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    type: {
      anyOf: [
        {
          type: "string",
          enum: ["generic", "twitter", "academic", "patents", "lexis"],
        },
        {
          $ref: "#/components/schemas/ItemType",
        },
      ],
      title: "Type",
    },
    import_mutex: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Import Mutex",
    },
    setting_motivational_quotes: {
      type: "boolean",
      title: "Setting Motivational Quotes",
      default: true,
    },
    owners: {
      items: {
        $ref: "#/components/schemas/UserBaseModel",
      },
      type: "array",
      title: "Owners",
    },
  },
  type: "object",
  required: ["name", "type", "owners"],
  title: "ProjectInfo",
} as const;

export const $ProjectModel = {
  properties: {
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    type: {
      anyOf: [
        {
          type: "string",
          enum: ["generic", "twitter", "academic", "patents", "lexis"],
        },
        {
          $ref: "#/components/schemas/ItemType",
        },
      ],
      title: "Type",
    },
    import_mutex: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Import Mutex",
    },
    setting_motivational_quotes: {
      type: "boolean",
      title: "Setting Motivational Quotes",
      default: true,
    },
  },
  type: "object",
  required: ["name", "type"],
  title: "ProjectModel",
  description: `Project is the basic structural and conceptual place around which all functionality evolves.
It is essentially a container for a logically connected set of analyses, e.g. all work for a paper.

Although Items (and subsequently their type-specific extensions) live outside the scope of a project,
they way they are augmented by annotations and analysis outcomes is always constrained to the scope
of a Project.`,
} as const;

export const $ProjectPermissionsModel = {
  properties: {
    project_permission_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Permission Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Project Id",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "User Id",
    },
    owner: {
      type: "boolean",
      title: "Owner",
      default: false,
    },
    dataset_read: {
      type: "boolean",
      title: "Dataset Read",
      default: false,
    },
    dataset_edit: {
      type: "boolean",
      title: "Dataset Edit",
      default: false,
    },
    imports_read: {
      type: "boolean",
      title: "Imports Read",
      default: false,
    },
    imports_edit: {
      type: "boolean",
      title: "Imports Edit",
      default: false,
    },
    annotations_read: {
      type: "boolean",
      title: "Annotations Read",
      default: false,
    },
    annotations_edit: {
      type: "boolean",
      title: "Annotations Edit",
      default: false,
    },
    pipelines_read: {
      type: "boolean",
      title: "Pipelines Read",
      default: false,
    },
    pipelines_edit: {
      type: "boolean",
      title: "Pipelines Edit",
      default: false,
    },
    artefacts_read: {
      type: "boolean",
      title: "Artefacts Read",
      default: false,
    },
    artefacts_edit: {
      type: "boolean",
      title: "Artefacts Edit",
      default: false,
    },
    search_dimensions: {
      type: "boolean",
      title: "Search Dimensions",
      default: false,
    },
    search_oa: {
      type: "boolean",
      title: "Search Oa",
      default: false,
    },
    import_limit_oa: {
      type: "integer",
      title: "Import Limit Oa",
      default: 0,
    },
  },
  type: "object",
  required: ["project_id", "user_id"],
  title: "ProjectPermissionsModel",
  description: `ProjectPermissions allows to define fine-grained project-level permission management.
Once such an entry exists, the user is assumed to have very basic access to the respective project.
A user may become "owner" of a project, which will allow them to do everything and effectively ignoring the
other more fine-grained permission settings.

It is assumed, that a user can always see and edit their own contributions (e.g. annotations) but
by giving them permission to view annotations, they can also see other users' annotations.`,
} as const;

export const $QueryResult = {
  properties: {
    n_docs: {
      type: "integer",
      title: "N Docs",
    },
    docs: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/AcademicItemModel",
          },
          type: "array",
        },
        {
          items: {
            $ref: "#/components/schemas/FullLexisNexisItemModel",
          },
          type: "array",
        },
        {
          items: {
            $ref: "#/components/schemas/GenericItemModel",
          },
          type: "array",
        },
      ],
      title: "Docs",
    },
  },
  type: "object",
  required: ["n_docs", "docs"],
  title: "QueryResult",
} as const;

export const $RankEntry = {
  properties: {
    user_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "string",
        },
      ],
      title: "User Id",
    },
    username: {
      type: "string",
      title: "Username",
    },
    full_name: {
      type: "string",
      title: "Full Name",
    },
    email: {
      type: "string",
      title: "Email",
    },
    affiliation: {
      type: "string",
      title: "Affiliation",
    },
    num_labels: {
      type: "integer",
      title: "Num Labels",
    },
    num_labeled_items: {
      type: "integer",
      title: "Num Labeled Items",
    },
  },
  type: "object",
  required: ["user_id", "username", "full_name", "email", "affiliation", "num_labels", "num_labeled_items"],
  title: "RankEntry",
} as const;

export const $ReferencedTweet = {
  properties: {
    id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "integer",
        },
      ],
      title: "Id",
    },
    type: {
      type: "string",
      enum: ["retweeted", "quoted", "replied_to"],
      title: "Type",
    },
  },
  type: "object",
  required: ["id", "type"],
  title: "ReferencedTweet",
} as const;

export const $ResolutionCell = {
  properties: {
    labels: {
      additionalProperties: {
        items: {
          $ref: "#/components/schemas/ResolutionUserEntry",
        },
        type: "array",
      },
      type: "object",
      title: "Labels",
    },
    resolution: {
      $ref: "#/components/schemas/BotAnnotationModel",
    },
    status: {
      $ref: "#/components/schemas/ResolutionStatus",
      default: "UNCHANGED",
    },
  },
  type: "object",
  required: ["labels", "resolution"],
  title: "ResolutionCell",
} as const;

export const $ResolutionMethod = {
  type: "string",
  enum: ["majority", "first", "first", "first"],
  title: "ResolutionMethod",
} as const;

export const $ResolutionOrdering = {
  properties: {
    identifier: {
      type: "integer",
      title: "Identifier",
    },
    first_occurrence: {
      type: "integer",
      title: "First Occurrence",
    },
    item_id: {
      type: "string",
      title: "Item Id",
    },
  },
  type: "object",
  required: ["identifier", "first_occurrence", "item_id"],
  title: "ResolutionOrdering",
} as const;

export const $ResolutionProposal = {
  properties: {
    scheme_info: {
      $ref: "#/components/schemas/AnnotationSchemeInfo",
    },
    labels: {
      items: {
        $ref: "#/components/schemas/FlatLabel",
      },
      type: "array",
      title: "Labels",
    },
    annotators: {
      items: {
        $ref: "#/components/schemas/UserModel",
      },
      type: "array",
      title: "Annotators",
    },
    ordering: {
      items: {
        $ref: "#/components/schemas/ResolutionOrdering",
      },
      type: "array",
      title: "Ordering",
    },
    matrix: {
      additionalProperties: {
        additionalProperties: {
          $ref: "#/components/schemas/ResolutionCell",
        },
        type: "object",
      },
      type: "object",
      title: "Matrix",
    },
  },
  type: "object",
  required: ["scheme_info", "labels", "annotators", "ordering", "matrix"],
  title: "ResolutionProposal",
} as const;

export const $ResolutionSnapshotEntry = {
  properties: {
    order_key: {
      type: "string",
      title: "Order Key",
    },
    path_key: {
      type: "string",
      title: "Path Key",
    },
    ba_id: {
      type: "string",
      title: "Ba Id",
    },
  },
  type: "object",
  required: ["order_key", "path_key", "ba_id"],
  title: "ResolutionSnapshotEntry",
} as const;

export const $ResolutionStatus = {
  type: "string",
  enum: ["NEW", "CHANGED", "UNCHANGED"],
  title: "ResolutionStatus",
} as const;

export const $ResolutionUserEntry = {
  properties: {
    assignment: {
      anyOf: [
        {
          $ref: "#/components/schemas/DehydratedAssignment",
        },
        {
          type: "null",
        },
      ],
    },
    annotation: {
      anyOf: [
        {
          $ref: "#/components/schemas/ItemAnnotation",
        },
        {
          type: "null",
        },
      ],
    },
    status: {
      $ref: "#/components/schemas/ResolutionStatus",
      default: "UNCHANGED",
    },
  },
  type: "object",
  title: "ResolutionUserEntry",
} as const;

export const $SavedResolution = {
  properties: {
    meta: {
      $ref: "#/components/schemas/BotAnnotationResolution",
    },
    proposal: {
      $ref: "#/components/schemas/ResolutionProposal",
    },
  },
  type: "object",
  required: ["meta", "proposal"],
  title: "SavedResolution",
} as const;

export const $ScopusImport = {
  properties: {
    sources: {
      items: {
        type: "string",
        format: "path",
      },
      type: "array",
      title: "Sources",
    },
    kind: {
      type: "string",
      enum: ["scopus"],
      const: "scopus",
      title: "Kind",
      default: "scopus",
    },
  },
  type: "object",
  required: ["sources"],
  title: "ScopusImport",
} as const;

export const $SearchPayload = {
  properties: {
    query: {
      type: "string",
      title: "Query",
    },
    limit: {
      type: "integer",
      title: "Limit",
      default: 20,
    },
    offset: {
      type: "integer",
      title: "Offset",
      default: 0,
    },
    def_type: {
      type: "string",
      enum: ["edismax", "lucene", "dismax"],
      title: "Def Type",
      default: "lucene",
    },
    field: {
      type: "string",
      enum: ["title", "abstract", "title_abstract"],
      title: "Field",
      default: "title_abstract",
    },
    histogram: {
      type: "boolean",
      title: "Histogram",
      default: false,
    },
    op: {
      type: "string",
      enum: ["OR", "AND"],
      title: "Op",
      default: "AND",
    },
    histogram_from: {
      type: "integer",
      title: "Histogram From",
      default: 1990,
    },
    histogram_to: {
      type: "integer",
      title: "Histogram To",
      default: 2024,
    },
  },
  type: "object",
  required: ["query"],
  title: "SearchPayload",
} as const;

export const $SearchResult = {
  properties: {
    query_time: {
      type: "integer",
      title: "Query Time",
    },
    num_found: {
      type: "integer",
      title: "Num Found",
    },
    docs: {
      items: {
        $ref: "#/components/schemas/AcademicItemModel",
      },
      type: "array",
      title: "Docs",
    },
    histogram: {
      anyOf: [
        {
          additionalProperties: {
            type: "integer",
          },
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Histogram",
    },
  },
  type: "object",
  required: ["query_time", "num_found", "docs"],
  title: "SearchResult",
} as const;

export const $SnapshotEntry = {
  properties: {
    value_bool: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Value Bool",
    },
    value_int: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Value Int",
    },
    value_float: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Value Float",
    },
    value_str: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Value Str",
    },
    multi_int: {
      anyOf: [
        {
          items: {
            type: "integer",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Multi Int",
    },
    order_key: {
      type: "string",
      title: "Order Key",
    },
    path_key: {
      type: "string",
      title: "Path Key",
    },
    item_id: {
      type: "string",
      title: "Item Id",
    },
    anno_id: {
      type: "string",
      title: "Anno Id",
    },
    user_id: {
      type: "string",
      title: "User Id",
    },
  },
  type: "object",
  required: ["order_key", "path_key", "item_id", "anno_id", "user_id"],
  title: "SnapshotEntry",
} as const;

export const $SubQuery = {
  properties: {
    filter: {
      type: "string",
      enum: ["sub"],
      const: "sub",
      title: "Filter",
      default: "sub",
    },
    and_: {
      anyOf: [
        {
          items: {
            oneOf: [
              {
                $ref: "#/components/schemas/FieldFilter",
              },
              {
                $ref: "#/components/schemas/FieldFilters",
              },
              {
                $ref: "#/components/schemas/LabelFilterMulti",
              },
              {
                $ref: "#/components/schemas/LabelFilterBool",
              },
              {
                $ref: "#/components/schemas/LabelFilterInt",
              },
              {
                $ref: "#/components/schemas/AssignmentFilter",
              },
              {
                $ref: "#/components/schemas/AnnotationFilter",
              },
              {
                $ref: "#/components/schemas/AbstractFilter",
              },
              {
                $ref: "#/components/schemas/ImportFilter",
              },
              {
                $ref: "#/components/schemas/MetaFilterBool",
              },
              {
                $ref: "#/components/schemas/MetaFilterInt",
              },
              {
                $ref: "#/components/schemas/MetaFilterStr",
              },
              {
                $ref: "#/components/schemas/SubQuery",
              },
            ],
            discriminator: {
              propertyName: "filter",
              mapping: {
                abstract: "#/components/schemas/AbstractFilter",
                annotation: "#/components/schemas/AnnotationFilter",
                assignment: "#/components/schemas/AssignmentFilter",
                field: "#/components/schemas/FieldFilter",
                field_mul: "#/components/schemas/FieldFilters",
                import: "#/components/schemas/ImportFilter",
                label_bool: "#/components/schemas/LabelFilterBool",
                label_int: "#/components/schemas/LabelFilterInt",
                label_multi: "#/components/schemas/LabelFilterMulti",
                meta_bool: "#/components/schemas/MetaFilterBool",
                meta_int: "#/components/schemas/MetaFilterInt",
                meta_str: "#/components/schemas/MetaFilterStr",
                sub: "#/components/schemas/SubQuery",
              },
            },
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "And ",
    },
    or_: {
      anyOf: [
        {
          items: {
            oneOf: [
              {
                $ref: "#/components/schemas/FieldFilter",
              },
              {
                $ref: "#/components/schemas/FieldFilters",
              },
              {
                $ref: "#/components/schemas/LabelFilterMulti",
              },
              {
                $ref: "#/components/schemas/LabelFilterBool",
              },
              {
                $ref: "#/components/schemas/LabelFilterInt",
              },
              {
                $ref: "#/components/schemas/AssignmentFilter",
              },
              {
                $ref: "#/components/schemas/AnnotationFilter",
              },
              {
                $ref: "#/components/schemas/AbstractFilter",
              },
              {
                $ref: "#/components/schemas/ImportFilter",
              },
              {
                $ref: "#/components/schemas/MetaFilterBool",
              },
              {
                $ref: "#/components/schemas/MetaFilterInt",
              },
              {
                $ref: "#/components/schemas/MetaFilterStr",
              },
              {
                $ref: "#/components/schemas/SubQuery",
              },
            ],
            discriminator: {
              propertyName: "filter",
              mapping: {
                abstract: "#/components/schemas/AbstractFilter",
                annotation: "#/components/schemas/AnnotationFilter",
                assignment: "#/components/schemas/AssignmentFilter",
                field: "#/components/schemas/FieldFilter",
                field_mul: "#/components/schemas/FieldFilters",
                import: "#/components/schemas/ImportFilter",
                label_bool: "#/components/schemas/LabelFilterBool",
                label_int: "#/components/schemas/LabelFilterInt",
                label_multi: "#/components/schemas/LabelFilterMulti",
                meta_bool: "#/components/schemas/MetaFilterBool",
                meta_int: "#/components/schemas/MetaFilterInt",
                meta_str: "#/components/schemas/MetaFilterStr",
                sub: "#/components/schemas/SubQuery",
              },
            },
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Or ",
    },
    not_: {
      anyOf: [
        {
          oneOf: [
            {
              $ref: "#/components/schemas/FieldFilter",
            },
            {
              $ref: "#/components/schemas/FieldFilters",
            },
            {
              $ref: "#/components/schemas/LabelFilterMulti",
            },
            {
              $ref: "#/components/schemas/LabelFilterBool",
            },
            {
              $ref: "#/components/schemas/LabelFilterInt",
            },
            {
              $ref: "#/components/schemas/AssignmentFilter",
            },
            {
              $ref: "#/components/schemas/AnnotationFilter",
            },
            {
              $ref: "#/components/schemas/AbstractFilter",
            },
            {
              $ref: "#/components/schemas/ImportFilter",
            },
            {
              $ref: "#/components/schemas/MetaFilterBool",
            },
            {
              $ref: "#/components/schemas/MetaFilterInt",
            },
            {
              $ref: "#/components/schemas/MetaFilterStr",
            },
            {
              $ref: "#/components/schemas/SubQuery",
            },
          ],
          discriminator: {
            propertyName: "filter",
            mapping: {
              abstract: "#/components/schemas/AbstractFilter",
              annotation: "#/components/schemas/AnnotationFilter",
              assignment: "#/components/schemas/AssignmentFilter",
              field: "#/components/schemas/FieldFilter",
              field_mul: "#/components/schemas/FieldFilters",
              import: "#/components/schemas/ImportFilter",
              label_bool: "#/components/schemas/LabelFilterBool",
              label_int: "#/components/schemas/LabelFilterInt",
              label_multi: "#/components/schemas/LabelFilterMulti",
              meta_bool: "#/components/schemas/MetaFilterBool",
              meta_int: "#/components/schemas/MetaFilterInt",
              meta_str: "#/components/schemas/MetaFilterStr",
              sub: "#/components/schemas/SubQuery",
            },
          },
        },
        {
          type: "null",
        },
      ],
      title: "Not ",
    },
  },
  type: "object",
  title: "SubQuery",
} as const;

export const $TaskModel = {
  properties: {
    task_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Task Id",
    },
    function_name: {
      type: "string",
      title: "Function Name",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "User Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    message_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Message Id",
    },
    comment: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Comment",
    },
    params: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Params",
    },
    fingerprint: {
      type: "string",
      title: "Fingerprint",
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_started: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Started",
    },
    time_finished: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Finished",
    },
    rec_expunge: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Rec Expunge",
    },
    status: {
      $ref: "#/components/schemas/TaskStatus",
      default: "PENDING",
    },
  },
  type: "object",
  required: ["function_name", "fingerprint"],
  title: "TaskModel",
} as const;

export const $TaskStatus = {
  type: "string",
  enum: ["PENDING", "RUNNING", "COMPLETED", "FAILED", "CANCELLED"],
  title: "TaskStatus",
} as const;

export const $TermStats = {
  properties: {
    term: {
      type: "string",
      title: "Term",
    },
    df: {
      type: "integer",
      title: "Df",
    },
    ttf: {
      type: "integer",
      title: "Ttf",
    },
  },
  type: "object",
  required: ["term", "df", "ttf"],
  title: "TermStats",
} as const;

export const $TwitterItemModel = {
  properties: {
    item_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Item Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Id",
    },
    type: {
      $ref: "#/components/schemas/ItemType",
      default: "twitter",
    },
    text: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Text",
    },
    twitter_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Twitter Id",
    },
    twitter_author_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Twitter Author Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    language: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Language",
    },
    conversation_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Conversation Id",
    },
    referenced_tweets: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/ReferencedTweet",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Referenced Tweets",
    },
    latitude: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Latitude",
    },
    longitude: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Longitude",
    },
    hashtags: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/Hashtag",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Hashtags",
    },
    mentions: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/Mention",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Mentions",
    },
    urls: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/URL",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Urls",
    },
    cashtags: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/Cashtag",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Cashtags",
    },
    context_annotations: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/ContextAnnotation",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Context Annotations",
    },
    retweet_count: {
      type: "integer",
      title: "Retweet Count",
    },
    reply_count: {
      type: "integer",
      title: "Reply Count",
    },
    like_count: {
      type: "integer",
      title: "Like Count",
    },
    quote_count: {
      type: "integer",
      title: "Quote Count",
    },
    user: {
      anyOf: [
        {
          $ref: "#/components/schemas/TwitterUserModel",
        },
        {
          type: "null",
        },
      ],
    },
  },
  type: "object",
  required: ["created_at", "retweet_count", "reply_count", "like_count", "quote_count"],
  title: "TwitterItemModel",
  description: `Corresponds to db.models.items.TwitterItem

For more in-depth documentation, please refer to:
https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet`,
} as const;

export const $TwitterUserModel = {
  properties: {
    id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Name",
    },
    username: {
      type: "string",
      title: "Username",
    },
    verified: {
      type: "boolean",
      title: "Verified",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    location: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Location",
    },
    followers_count: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Followers Count",
    },
    following_count: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Following Count",
    },
    tweet_count: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Tweet Count",
    },
    listed_count: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Listed Count",
    },
  },
  type: "object",
  required: ["created_at", "username", "verified"],
  title: "TwitterUserModel",
  description: `Flattened and reduced representation of a Twitter User Object
https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user

NOTE:
    - In the context of a \`TwitterItemModel\`, the \`id\` is not set as it can be inferred from \`twitter_author_id\`
    - \`name\` is None if \`name\` == \`username\` to save space`,
} as const;

export const $URL = {
  properties: {
    start: {
      type: "integer",
      title: "Start",
    },
    end: {
      type: "integer",
      title: "End",
    },
    url: {
      type: "string",
      title: "Url",
    },
    url_expanded: {
      type: "string",
      title: "Url Expanded",
    },
  },
  type: "object",
  required: ["start", "end", "url", "url_expanded"],
  title: "URL",
} as const;

export const $UserBaseModel = {
  properties: {
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "User Id",
    },
    username: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Username",
    },
    full_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Full Name",
    },
    email: {
      anyOf: [
        {
          type: "string",
          format: "email",
        },
        {
          type: "null",
        },
      ],
      title: "Email",
    },
    affiliation: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Affiliation",
    },
    is_superuser: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Superuser",
      default: false,
    },
    is_active: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Active",
      default: true,
    },
    setting_newsletter: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Setting Newsletter",
      default: false,
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
  },
  type: "object",
  title: "UserBaseModel",
  description: `User represents a person.
Most entries in the database will be (indirectly) linked to user accounts, so this is
at the core of access management and ownership.`,
} as const;

export const $UserInDBModel = {
  properties: {
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "User Id",
    },
    username: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Username",
    },
    full_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Full Name",
    },
    email: {
      anyOf: [
        {
          type: "string",
          format: "email",
        },
        {
          type: "null",
        },
      ],
      title: "Email",
    },
    affiliation: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Affiliation",
    },
    is_superuser: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Superuser",
      default: false,
    },
    is_active: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Active",
      default: true,
    },
    setting_newsletter: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Setting Newsletter",
      default: false,
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
    password: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Password",
    },
  },
  type: "object",
  title: "UserInDBModel",
} as const;

export const $UserModel = {
  properties: {
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "User Id",
    },
    username: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Username",
    },
    full_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Full Name",
    },
    email: {
      anyOf: [
        {
          type: "string",
          format: "email",
        },
        {
          type: "null",
        },
      ],
      title: "Email",
    },
    affiliation: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Affiliation",
    },
    is_superuser: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Superuser",
      default: false,
    },
    is_active: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Active",
      default: true,
    },
    setting_newsletter: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Setting Newsletter",
      default: false,
    },
    time_created: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Created",
    },
    time_updated: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Time Updated",
    },
  },
  type: "object",
  title: "UserModel",
} as const;

export const $UserPermission = {
  properties: {
    project_permission_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Project Permission Id",
    },
    project_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "Project Id",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "string",
          format: "uuid",
        },
      ],
      title: "User Id",
    },
    owner: {
      type: "boolean",
      title: "Owner",
      default: false,
    },
    dataset_read: {
      type: "boolean",
      title: "Dataset Read",
      default: false,
    },
    dataset_edit: {
      type: "boolean",
      title: "Dataset Edit",
      default: false,
    },
    imports_read: {
      type: "boolean",
      title: "Imports Read",
      default: false,
    },
    imports_edit: {
      type: "boolean",
      title: "Imports Edit",
      default: false,
    },
    annotations_read: {
      type: "boolean",
      title: "Annotations Read",
      default: false,
    },
    annotations_edit: {
      type: "boolean",
      title: "Annotations Edit",
      default: false,
    },
    pipelines_read: {
      type: "boolean",
      title: "Pipelines Read",
      default: false,
    },
    pipelines_edit: {
      type: "boolean",
      title: "Pipelines Edit",
      default: false,
    },
    artefacts_read: {
      type: "boolean",
      title: "Artefacts Read",
      default: false,
    },
    artefacts_edit: {
      type: "boolean",
      title: "Artefacts Edit",
      default: false,
    },
    search_dimensions: {
      type: "boolean",
      title: "Search Dimensions",
      default: false,
    },
    search_oa: {
      type: "boolean",
      title: "Search Oa",
      default: false,
    },
    import_limit_oa: {
      type: "integer",
      title: "Import Limit Oa",
      default: 0,
    },
    user: {
      $ref: "#/components/schemas/UserBaseModel",
    },
  },
  type: "object",
  required: ["project_id", "user_id", "user"],
  title: "UserPermission",
} as const;

export const $UserProjectAssignmentScope = {
  properties: {
    scope: {
      $ref: "#/components/schemas/AssignmentScopeModel",
    },
    scheme_name: {
      type: "string",
      title: "Scheme Name",
    },
    scheme_description: {
      type: "string",
      title: "Scheme Description",
    },
    num_assignments: {
      type: "integer",
      title: "Num Assignments",
    },
    num_open: {
      type: "integer",
      title: "Num Open",
    },
    num_partial: {
      type: "integer",
      title: "Num Partial",
    },
    num_completed: {
      type: "integer",
      title: "Num Completed",
    },
  },
  type: "object",
  required: [
    "scope",
    "scheme_name",
    "scheme_description",
    "num_assignments",
    "num_open",
    "num_partial",
    "num_completed",
  ],
  title: "UserProjectAssignmentScope",
} as const;

export const $UsersFilter = {
  properties: {
    user_ids: {
      items: {
        type: "string",
      },
      type: "array",
      title: "User Ids",
    },
    mode: {
      type: "string",
      enum: ["ALL", "ANY"],
      title: "Mode",
    },
  },
  type: "object",
  required: ["user_ids", "mode"],
  title: "UsersFilter",
} as const;

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "integer",
          },
        ],
      },
      type: "array",
      title: "Location",
    },
    msg: {
      type: "string",
      title: "Message",
    },
    type: {
      type: "string",
      title: "Error Type",
    },
  },
  type: "object",
  required: ["loc", "msg", "type"],
  title: "ValidationError",
} as const;

export const $WoSImport = {
  properties: {
    sources: {
      items: {
        type: "string",
        format: "path",
      },
      type: "array",
      title: "Sources",
    },
    kind: {
      type: "string",
      enum: ["wos"],
      const: "wos",
      title: "Kind",
      default: "wos",
    },
  },
  type: "object",
  required: ["sources"],
  title: "WoSImport",
} as const;
